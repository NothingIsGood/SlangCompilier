//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SLangGrammar.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SLangGrammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class SLangGrammarParser : Parser {
	public const int
		Colon=1, Semicolon=2, Comma=3, Point=4, Variable=5, Const=6, Let=7, Return=8, 
		Input=9, Output=10, Call=11, Readonly=12, If=13, Then=14, Else=15, While=16, 
		Repeat=17, Elseif=18, Do=19, Module=20, Import=21, Start=22, End=23, Function=24, 
		Procedure=25, LBrace=26, RBrace=27, LSBrace=28, RSBrace=29, LABrace=30, 
		RABrace=31, Assign=32, Integer=33, Real=34, Character=35, Boolean=36, 
		String=37, Unit=38, New=39, Nil=40, Pointer=41, Array=42, FunctionArgModifier=43, 
		ArgValModifier=44, ArgRefModifier=45, AccessModifier=46, PublicModifier=47, 
		PrivateModifier=48, Class=49, Inherit=50, Base=51, Abstract=52, Override=53, 
		File=54, SimpleType=55, Relation=56, AddictiveOp=57, MultiplicativeOp=58, 
		AddOp=59, SubOp=60, MulOp=61, DivOp=62, ModOp=63, BoolOr=64, BoolAnd=65, 
		BoolEq=66, BoolNeq=67, BoolG=68, BoolL=69, BoolGeq=70, BoolLeq=71, BoolNot=72, 
		IntValue=73, RealValue=74, BoolValue=75, Id=76, StringLiteral=77, SingleCharacter=78, 
		Comment=79, Ws=80;
	public const int
		RULE_typeName = 0, RULE_ptrType = 1, RULE_customType = 2, RULE_scalarType = 3, 
		RULE_simpleType = 4, RULE_arrayType = 5, RULE_arrayDimention = 6, RULE_start = 7, 
		RULE_moduleImport = 8, RULE_module = 9, RULE_moduleStatementsSeq = 10, 
		RULE_moduleDeclareSeq = 11, RULE_declare = 12, RULE_variableDecl = 13, 
		RULE_simpleDecl = 14, RULE_arrayDecl = 15, RULE_ptrDecl = 16, RULE_constDecl = 17, 
		RULE_moduleFieldDecl = 18, RULE_typeDecl = 19, RULE_typeInherit = 20, 
		RULE_typeFieldDecl = 21, RULE_functionDecl = 22, RULE_thisHeader = 23, 
		RULE_routineArgList = 24, RULE_routineArg = 25, RULE_procedureDecl = 26, 
		RULE_importHead = 27, RULE_statementSeq = 28, RULE_statement = 29, RULE_simpleStatement = 30, 
		RULE_complexStatement = 31, RULE_let = 32, RULE_ifC = 33, RULE_whileC = 34, 
		RULE_repeatC = 35, RULE_input = 36, RULE_output = 37, RULE_returnC = 38, 
		RULE_call = 39, RULE_exprList = 40, RULE_exp = 41, RULE_simpleExpr = 42, 
		RULE_term = 43, RULE_factor = 44, RULE_newC = 45, RULE_designator = 46, 
		RULE_qualident = 47;
	public static readonly string[] ruleNames = {
		"typeName", "ptrType", "customType", "scalarType", "simpleType", "arrayType", 
		"arrayDimention", "start", "moduleImport", "module", "moduleStatementsSeq", 
		"moduleDeclareSeq", "declare", "variableDecl", "simpleDecl", "arrayDecl", 
		"ptrDecl", "constDecl", "moduleFieldDecl", "typeDecl", "typeInherit", 
		"typeFieldDecl", "functionDecl", "thisHeader", "routineArgList", "routineArg", 
		"procedureDecl", "importHead", "statementSeq", "statement", "simpleStatement", 
		"complexStatement", "let", "ifC", "whileC", "repeatC", "input", "output", 
		"returnC", "call", "exprList", "exp", "simpleExpr", "term", "factor", 
		"newC", "designator", "qualident"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "';'", "','", "'.'", "'variable'", "'const'", "'let'", "'return'", 
		"'input'", "'output'", "'call'", "'readonly'", "'if'", "'then'", "'else'", 
		"'while'", "'repeat'", "'elseif'", "'do'", "'module'", "'import'", "'start'", 
		"'end'", "'function'", "'procedure'", "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "':='", "'integer'", "'real'", "'character'", "'boolean'", "'string'", 
		"'unit'", "'new'", "'nil'", "'pointer'", "'array'", null, "'val'", "'ref'", 
		null, "'public'", "'private'", "'class'", "'inherit'", "'base'", "'abstract'", 
		"'override'", "'file'", null, null, null, null, "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'||'", "'&&'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Colon", "Semicolon", "Comma", "Point", "Variable", "Const", "Let", 
		"Return", "Input", "Output", "Call", "Readonly", "If", "Then", "Else", 
		"While", "Repeat", "Elseif", "Do", "Module", "Import", "Start", "End", 
		"Function", "Procedure", "LBrace", "RBrace", "LSBrace", "RSBrace", "LABrace", 
		"RABrace", "Assign", "Integer", "Real", "Character", "Boolean", "String", 
		"Unit", "New", "Nil", "Pointer", "Array", "FunctionArgModifier", "ArgValModifier", 
		"ArgRefModifier", "AccessModifier", "PublicModifier", "PrivateModifier", 
		"Class", "Inherit", "Base", "Abstract", "Override", "File", "SimpleType", 
		"Relation", "AddictiveOp", "MultiplicativeOp", "AddOp", "SubOp", "MulOp", 
		"DivOp", "ModOp", "BoolOr", "BoolAnd", "BoolEq", "BoolNeq", "BoolG", "BoolL", 
		"BoolGeq", "BoolLeq", "BoolNot", "IntValue", "RealValue", "BoolValue", 
		"Id", "StringLiteral", "SingleCharacter", "Comment", "Ws"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SLangGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SLangGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class TypeNameContext : ParserRuleContext {
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_typeName);
		try {
			State = 98;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Pointer:
			case SimpleType:
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96; scalarType();
				}
				break;
			case Array:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97; arrayType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrTypeContext : ParserRuleContext {
		public ITerminalNode Pointer() { return GetToken(SLangGrammarParser.Pointer, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public CustomTypeContext customType() {
			return GetRuleContext<CustomTypeContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public PtrTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterPtrType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitPtrType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtrType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtrTypeContext ptrType() {
		PtrTypeContext _localctx = new PtrTypeContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_ptrType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(Pointer);
			State = 105;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBrace) {
				{
				State = 101; Match(LBrace);
				State = 102; customType();
				State = 103; Match(RBrace);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomTypeContext : ParserRuleContext {
		public QualidentContext qualident() {
			return GetRuleContext<QualidentContext>(0);
		}
		public CustomTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterCustomType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitCustomType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomTypeContext customType() {
		CustomTypeContext _localctx = new CustomTypeContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_customType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; qualident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarTypeContext : ParserRuleContext {
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public CustomTypeContext customType() {
			return GetRuleContext<CustomTypeContext>(0);
		}
		public PtrTypeContext ptrType() {
			return GetRuleContext<PtrTypeContext>(0);
		}
		public ScalarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterScalarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitScalarType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarTypeContext scalarType() {
		ScalarTypeContext _localctx = new ScalarTypeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_scalarType);
		try {
			State = 112;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SimpleType:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109; simpleType();
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110; customType();
				}
				break;
			case Pointer:
				EnterOuterAlt(_localctx, 3);
				{
				State = 111; ptrType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public ITerminalNode SimpleType() { return GetToken(SLangGrammarParser.SimpleType, 0); }
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_simpleType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(SimpleType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public ITerminalNode Array() { return GetToken(SLangGrammarParser.Array, 0); }
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public ArrayDimentionContext[] arrayDimention() {
			return GetRuleContexts<ArrayDimentionContext>();
		}
		public ArrayDimentionContext arrayDimention(int i) {
			return GetRuleContext<ArrayDimentionContext>(i);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_arrayType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(Array);
			State = 118;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 117; arrayDimention();
				}
				}
				State = 120;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LSBrace );
			State = 122; scalarType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDimentionContext : ParserRuleContext {
		public ITerminalNode LSBrace() { return GetToken(SLangGrammarParser.LSBrace, 0); }
		public ITerminalNode RSBrace() { return GetToken(SLangGrammarParser.RSBrace, 0); }
		public ArrayDimentionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDimention; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterArrayDimention(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitArrayDimention(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDimention(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDimentionContext arrayDimention() {
		ArrayDimentionContext _localctx = new ArrayDimentionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_arrayDimention);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(LSBrace);
			State = 125; Match(RSBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartContext : ParserRuleContext {
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public ModuleImportContext[] moduleImport() {
			return GetRuleContexts<ModuleImportContext>();
		}
		public ModuleImportContext moduleImport(int i) {
			return GetRuleContext<ModuleImportContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Import) {
				{
				{
				State = 127; moduleImport();
				}
				}
				State = 132;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 133; module();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleImportContext : ParserRuleContext {
		public ITerminalNode Import() { return GetToken(SLangGrammarParser.Import, 0); }
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ModuleImportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleImport; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterModuleImport(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitModuleImport(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleImport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleImportContext moduleImport() {
		ModuleImportContext _localctx = new ModuleImportContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_moduleImport);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(Import);
			State = 136; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public ITerminalNode Module() { return GetToken(SLangGrammarParser.Module, 0); }
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ModuleDeclareSeqContext moduleDeclareSeq() {
			return GetRuleContext<ModuleDeclareSeqContext>(0);
		}
		public ModuleStatementsSeqContext moduleStatementsSeq() {
			return GetRuleContext<ModuleStatementsSeqContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(Module);
			State = 139; Match(Id);
			State = 140; moduleDeclareSeq();
			State = 142;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Start) {
				{
				State = 141; moduleStatementsSeq();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleStatementsSeqContext : ParserRuleContext {
		public ITerminalNode Start() { return GetToken(SLangGrammarParser.Start, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLangGrammarParser.End, 0); }
		public ModuleStatementsSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleStatementsSeq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterModuleStatementsSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitModuleStatementsSeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleStatementsSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleStatementsSeqContext moduleStatementsSeq() {
		ModuleStatementsSeqContext _localctx = new ModuleStatementsSeqContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_moduleStatementsSeq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(Start);
			State = 145; statementSeq();
			State = 146; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclareSeqContext : ParserRuleContext {
		public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		public ProcedureDeclContext[] procedureDecl() {
			return GetRuleContexts<ProcedureDeclContext>();
		}
		public ProcedureDeclContext procedureDecl(int i) {
			return GetRuleContext<ProcedureDeclContext>(i);
		}
		public TypeDeclContext[] typeDecl() {
			return GetRuleContexts<TypeDeclContext>();
		}
		public TypeDeclContext typeDecl(int i) {
			return GetRuleContext<TypeDeclContext>(i);
		}
		public ModuleFieldDeclContext[] moduleFieldDecl() {
			return GetRuleContexts<ModuleFieldDeclContext>();
		}
		public ModuleFieldDeclContext moduleFieldDecl(int i) {
			return GetRuleContext<ModuleFieldDeclContext>(i);
		}
		public ModuleDeclareSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclareSeq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterModuleDeclareSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitModuleDeclareSeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclareSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclareSeqContext moduleDeclareSeq() {
		ModuleDeclareSeqContext _localctx = new ModuleDeclareSeqContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_moduleDeclareSeq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LSBrace || _la==AccessModifier) {
				{
				State = 152;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
				case 1:
					{
					State = 148; functionDecl();
					}
					break;

				case 2:
					{
					State = 149; procedureDecl();
					}
					break;

				case 3:
					{
					State = 150; typeDecl();
					}
					break;

				case 4:
					{
					State = 151; moduleFieldDecl();
					}
					break;
				}
				}
				State = 156;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public VariableDeclContext variableDecl() {
			return GetRuleContext<VariableDeclContext>(0);
		}
		public ConstDeclContext constDecl() {
			return GetRuleContext<ConstDeclContext>(0);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_declare);
		try {
			State = 159;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Variable:
			case Pointer:
			case Array:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157; variableDecl();
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; constDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclContext : ParserRuleContext {
		public SimpleDeclContext simpleDecl() {
			return GetRuleContext<SimpleDeclContext>(0);
		}
		public ArrayDeclContext arrayDecl() {
			return GetRuleContext<ArrayDeclContext>(0);
		}
		public PtrDeclContext ptrDecl() {
			return GetRuleContext<PtrDeclContext>(0);
		}
		public VariableDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterVariableDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitVariableDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclContext variableDecl() {
		VariableDeclContext _localctx = new VariableDeclContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_variableDecl);
		try {
			State = 164;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Variable:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161; simpleDecl();
				}
				break;
			case Array:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162; arrayDecl();
				}
				break;
			case Pointer:
				EnterOuterAlt(_localctx, 3);
				{
				State = 163; ptrDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleDeclContext : ParserRuleContext {
		public ITerminalNode Variable() { return GetToken(SLangGrammarParser.Variable, 0); }
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ITerminalNode Assign() { return GetToken(SLangGrammarParser.Assign, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public SimpleDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterSimpleDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitSimpleDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleDeclContext simpleDecl() {
		SimpleDeclContext _localctx = new SimpleDeclContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_simpleDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(Variable);
			State = 167; simpleType();
			State = 168; Match(Id);
			State = 171;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Assign) {
				{
				State = 169; Match(Assign);
				State = 170; exp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclContext : ParserRuleContext {
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ITerminalNode Assign() { return GetToken(SLangGrammarParser.Assign, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ArrayDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterArrayDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitArrayDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclContext arrayDecl() {
		ArrayDeclContext _localctx = new ArrayDeclContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_arrayDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; arrayType();
			State = 174; Match(Id);
			State = 177;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Assign) {
				{
				State = 175; Match(Assign);
				State = 176; exp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrDeclContext : ParserRuleContext {
		public PtrTypeContext ptrType() {
			return GetRuleContext<PtrTypeContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ITerminalNode Assign() { return GetToken(SLangGrammarParser.Assign, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public PtrDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterPtrDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitPtrDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtrDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtrDeclContext ptrDecl() {
		PtrDeclContext _localctx = new PtrDeclContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_ptrDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; ptrType();
			State = 180; Match(Id);
			State = 183;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Assign) {
				{
				State = 181; Match(Assign);
				State = 182; exp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclContext : ParserRuleContext {
		public ITerminalNode Const() { return GetToken(SLangGrammarParser.Const, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ITerminalNode Assign() { return GetToken(SLangGrammarParser.Assign, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ConstDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterConstDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitConstDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclContext constDecl() {
		ConstDeclContext _localctx = new ConstDeclContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_constDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(Const);
			State = 186; typeName();
			State = 187; Match(Id);
			State = 188; Match(Assign);
			State = 189; exp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleFieldDeclContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLangGrammarParser.AccessModifier, 0); }
		public VariableDeclContext variableDecl() {
			return GetRuleContext<VariableDeclContext>(0);
		}
		public ITerminalNode Semicolon() { return GetToken(SLangGrammarParser.Semicolon, 0); }
		public ITerminalNode Readonly() { return GetToken(SLangGrammarParser.Readonly, 0); }
		public ModuleFieldDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleFieldDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterModuleFieldDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitModuleFieldDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleFieldDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleFieldDeclContext moduleFieldDecl() {
		ModuleFieldDeclContext _localctx = new ModuleFieldDeclContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_moduleFieldDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(AccessModifier);
			State = 193;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Readonly) {
				{
				State = 192; Match(Readonly);
				}
			}

			State = 195; variableDecl();
			State = 196; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLangGrammarParser.AccessModifier, 0); }
		public ITerminalNode Class() { return GetToken(SLangGrammarParser.Class, 0); }
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ITerminalNode End() { return GetToken(SLangGrammarParser.End, 0); }
		public ITerminalNode Base() { return GetToken(SLangGrammarParser.Base, 0); }
		public TypeInheritContext typeInherit() {
			return GetRuleContext<TypeInheritContext>(0);
		}
		public TypeFieldDeclContext[] typeFieldDecl() {
			return GetRuleContexts<TypeFieldDeclContext>();
		}
		public TypeFieldDeclContext typeFieldDecl(int i) {
			return GetRuleContext<TypeFieldDeclContext>(i);
		}
		public TypeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterTypeDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitTypeDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclContext typeDecl() {
		TypeDeclContext _localctx = new TypeDeclContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_typeDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(AccessModifier);
			State = 200;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Base) {
				{
				State = 199; Match(Base);
				}
			}

			State = 202; Match(Class);
			State = 203; Match(Id);
			State = 205;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Inherit) {
				{
				State = 204; typeInherit();
				}
			}

			State = 210;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AccessModifier) {
				{
				{
				State = 207; typeFieldDecl();
				}
				}
				State = 212;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 213; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInheritContext : ParserRuleContext {
		public ITerminalNode Inherit() { return GetToken(SLangGrammarParser.Inherit, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public CustomTypeContext customType() {
			return GetRuleContext<CustomTypeContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public TypeInheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInherit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterTypeInherit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitTypeInherit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInherit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInheritContext typeInherit() {
		TypeInheritContext _localctx = new TypeInheritContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_typeInherit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(Inherit);
			State = 216; Match(LBrace);
			State = 217; customType();
			State = 218; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeFieldDeclContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLangGrammarParser.AccessModifier, 0); }
		public VariableDeclContext variableDecl() {
			return GetRuleContext<VariableDeclContext>(0);
		}
		public ITerminalNode Semicolon() { return GetToken(SLangGrammarParser.Semicolon, 0); }
		public TypeFieldDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeFieldDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterTypeFieldDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitTypeFieldDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeFieldDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeFieldDeclContext typeFieldDecl() {
		TypeFieldDeclContext _localctx = new TypeFieldDeclContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_typeFieldDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(AccessModifier);
			State = 221; variableDecl();
			State = 222; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLangGrammarParser.AccessModifier, 0); }
		public ITerminalNode Function() { return GetToken(SLangGrammarParser.Function, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public RoutineArgListContext routineArgList() {
			return GetRuleContext<RoutineArgListContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public ITerminalNode Colon() { return GetToken(SLangGrammarParser.Colon, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLangGrammarParser.End, 0); }
		public ImportHeadContext importHead() {
			return GetRuleContext<ImportHeadContext>(0);
		}
		public ThisHeaderContext thisHeader() {
			return GetRuleContext<ThisHeaderContext>(0);
		}
		public ITerminalNode Abstract() { return GetToken(SLangGrammarParser.Abstract, 0); }
		public ITerminalNode Override() { return GetToken(SLangGrammarParser.Override, 0); }
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LSBrace) {
				{
				State = 224; importHead();
				}
			}

			State = 227; Match(AccessModifier);
			State = 229;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Abstract || _la==Override) {
				{
				State = 228;
				_la = _input.La(1);
				if ( !(_la==Abstract || _la==Override) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 232;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBrace) {
				{
				State = 231; thisHeader();
				}
			}

			State = 234; Match(Function);
			State = 235; Match(LBrace);
			State = 236; routineArgList();
			State = 237; Match(RBrace);
			State = 238; Match(Colon);
			State = 239; typeName();
			State = 240; Match(Id);
			State = 241; statementSeq();
			State = 242; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThisHeaderContext : ParserRuleContext {
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public CustomTypeContext customType() {
			return GetRuleContext<CustomTypeContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public ThisHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thisHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterThisHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitThisHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThisHeaderContext thisHeader() {
		ThisHeaderContext _localctx = new ThisHeaderContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_thisHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; Match(LBrace);
			State = 245; customType();
			State = 246; Match(Id);
			State = 247; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineArgListContext : ParserRuleContext {
		public RoutineArgContext[] routineArg() {
			return GetRuleContexts<RoutineArgContext>();
		}
		public RoutineArgContext routineArg(int i) {
			return GetRuleContext<RoutineArgContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SLangGrammarParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SLangGrammarParser.Comma, i);
		}
		public RoutineArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterRoutineArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitRoutineArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineArgListContext routineArgList() {
		RoutineArgListContext _localctx = new RoutineArgListContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_routineArgList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FunctionArgModifier:
				{
				State = 249; routineArg();
				State = 254;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==Comma) {
					{
					{
					State = 250; Match(Comma);
					State = 251; routineArg();
					}
					}
					State = 256;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case RBrace:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineArgContext : ParserRuleContext {
		public ITerminalNode FunctionArgModifier() { return GetToken(SLangGrammarParser.FunctionArgModifier, 0); }
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public RoutineArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterRoutineArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitRoutineArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineArgContext routineArg() {
		RoutineArgContext _localctx = new RoutineArgContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_routineArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; Match(FunctionArgModifier);
			State = 261; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDeclContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLangGrammarParser.AccessModifier, 0); }
		public ITerminalNode Procedure() { return GetToken(SLangGrammarParser.Procedure, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public RoutineArgListContext routineArgList() {
			return GetRuleContext<RoutineArgListContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLangGrammarParser.End, 0); }
		public ImportHeadContext importHead() {
			return GetRuleContext<ImportHeadContext>(0);
		}
		public ThisHeaderContext thisHeader() {
			return GetRuleContext<ThisHeaderContext>(0);
		}
		public ITerminalNode Abstract() { return GetToken(SLangGrammarParser.Abstract, 0); }
		public ITerminalNode Override() { return GetToken(SLangGrammarParser.Override, 0); }
		public ProcedureDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterProcedureDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitProcedureDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDeclContext procedureDecl() {
		ProcedureDeclContext _localctx = new ProcedureDeclContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_procedureDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LSBrace) {
				{
				State = 263; importHead();
				}
			}

			State = 266; Match(AccessModifier);
			State = 268;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Abstract || _la==Override) {
				{
				State = 267;
				_la = _input.La(1);
				if ( !(_la==Abstract || _la==Override) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 271;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBrace) {
				{
				State = 270; thisHeader();
				}
			}

			State = 273; Match(Procedure);
			State = 274; Match(LBrace);
			State = 275; routineArgList();
			State = 276; Match(RBrace);
			State = 277; Match(Id);
			State = 278; statementSeq();
			State = 279; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportHeadContext : ParserRuleContext {
		public ITerminalNode LSBrace() { return GetToken(SLangGrammarParser.LSBrace, 0); }
		public ITerminalNode File() { return GetToken(SLangGrammarParser.File, 0); }
		public ITerminalNode[] StringLiteral() { return GetTokens(SLangGrammarParser.StringLiteral); }
		public ITerminalNode StringLiteral(int i) {
			return GetToken(SLangGrammarParser.StringLiteral, i);
		}
		public ITerminalNode Import() { return GetToken(SLangGrammarParser.Import, 0); }
		public ITerminalNode RSBrace() { return GetToken(SLangGrammarParser.RSBrace, 0); }
		public ImportHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importHead; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterImportHead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitImportHead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportHeadContext importHead() {
		ImportHeadContext _localctx = new ImportHeadContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_importHead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281; Match(LSBrace);
			State = 282; Match(File);
			State = 283; Match(StringLiteral);
			State = 284; Match(Import);
			State = 285; Match(StringLiteral);
			State = 286; Match(RSBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementSeqContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSeq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterStatementSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitStatementSeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementSeqContext statementSeq() {
		StatementSeqContext _localctx = new StatementSeqContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_statementSeq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 288; statement();
					}
					} 
				}
				State = 293;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public ComplexStatementContext complexStatement() {
			return GetRuleContext<ComplexStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Variable:
			case Const:
			case Let:
			case Return:
			case Input:
			case Output:
			case Call:
			case Pointer:
			case Array:
				{
				State = 294; simpleStatement();
				}
				break;
			case If:
			case While:
			case Repeat:
				{
				State = 295; complexStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		public ITerminalNode Semicolon() { return GetToken(SLangGrammarParser.Semicolon, 0); }
		public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public OutputContext output() {
			return GetRuleContext<OutputContext>(0);
		}
		public ReturnCContext returnC() {
			return GetRuleContext<ReturnCContext>(0);
		}
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_simpleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Variable:
			case Const:
			case Pointer:
			case Array:
				{
				State = 298; declare();
				}
				break;
			case Let:
				{
				State = 299; let();
				}
				break;
			case Input:
				{
				State = 300; input();
				}
				break;
			case Output:
				{
				State = 301; output();
				}
				break;
			case Return:
				{
				State = 302; returnC();
				}
				break;
			case Call:
				{
				State = 303; call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 306; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexStatementContext : ParserRuleContext {
		public IfCContext ifC() {
			return GetRuleContext<IfCContext>(0);
		}
		public WhileCContext whileC() {
			return GetRuleContext<WhileCContext>(0);
		}
		public RepeatCContext repeatC() {
			return GetRuleContext<RepeatCContext>(0);
		}
		public ComplexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterComplexStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitComplexStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexStatementContext complexStatement() {
		ComplexStatementContext _localctx = new ComplexStatementContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_complexStatement);
		try {
			State = 311;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 308; ifC();
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 2);
				{
				State = 309; whileC();
				}
				break;
			case Repeat:
				EnterOuterAlt(_localctx, 3);
				{
				State = 310; repeatC();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		public ITerminalNode Let() { return GetToken(SLangGrammarParser.Let, 0); }
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(SLangGrammarParser.Assign, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterLet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitLet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313; Match(Let);
			State = 314; designator();
			State = 315; Match(Assign);
			State = 316; exp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfCContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(SLangGrammarParser.If, 0); }
		public ITerminalNode[] LBrace() { return GetTokens(SLangGrammarParser.LBrace); }
		public ITerminalNode LBrace(int i) {
			return GetToken(SLangGrammarParser.LBrace, i);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] RBrace() { return GetTokens(SLangGrammarParser.RBrace); }
		public ITerminalNode RBrace(int i) {
			return GetToken(SLangGrammarParser.RBrace, i);
		}
		public ITerminalNode[] Then() { return GetTokens(SLangGrammarParser.Then); }
		public ITerminalNode Then(int i) {
			return GetToken(SLangGrammarParser.Then, i);
		}
		public StatementSeqContext[] statementSeq() {
			return GetRuleContexts<StatementSeqContext>();
		}
		public StatementSeqContext statementSeq(int i) {
			return GetRuleContext<StatementSeqContext>(i);
		}
		public ITerminalNode End() { return GetToken(SLangGrammarParser.End, 0); }
		public ITerminalNode[] Elseif() { return GetTokens(SLangGrammarParser.Elseif); }
		public ITerminalNode Elseif(int i) {
			return GetToken(SLangGrammarParser.Elseif, i);
		}
		public ITerminalNode Else() { return GetToken(SLangGrammarParser.Else, 0); }
		public IfCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifC; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterIfC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitIfC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfCContext ifC() {
		IfCContext _localctx = new IfCContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_ifC);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; Match(If);
			State = 319; Match(LBrace);
			State = 320; exp();
			State = 321; Match(RBrace);
			State = 322; Match(Then);
			State = 323; statementSeq();
			State = 333;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Elseif) {
				{
				{
				State = 324; Match(Elseif);
				State = 325; Match(LBrace);
				State = 326; exp();
				State = 327; Match(RBrace);
				State = 328; Match(Then);
				State = 329; statementSeq();
				}
				}
				State = 335;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 338;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Else) {
				{
				State = 336; Match(Else);
				State = 337; statementSeq();
				}
			}

			State = 340; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileCContext : ParserRuleContext {
		public ITerminalNode While() { return GetToken(SLangGrammarParser.While, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public ITerminalNode Do() { return GetToken(SLangGrammarParser.Do, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLangGrammarParser.End, 0); }
		public WhileCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileC; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterWhileC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitWhileC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileCContext whileC() {
		WhileCContext _localctx = new WhileCContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_whileC);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342; Match(While);
			State = 343; Match(LBrace);
			State = 344; exp();
			State = 345; Match(RBrace);
			State = 346; Match(Do);
			State = 347; statementSeq();
			State = 348; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatCContext : ParserRuleContext {
		public ITerminalNode Repeat() { return GetToken(SLangGrammarParser.Repeat, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode While() { return GetToken(SLangGrammarParser.While, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public RepeatCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatC; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterRepeatC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitRepeatC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatCContext repeatC() {
		RepeatCContext _localctx = new RepeatCContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_repeatC);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; Match(Repeat);
			State = 351; statementSeq();
			State = 352; Match(While);
			State = 353; Match(LBrace);
			State = 354; exp();
			State = 355; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public ITerminalNode Input() { return GetToken(SLangGrammarParser.Input, 0); }
		public DesignatorContext[] designator() {
			return GetRuleContexts<DesignatorContext>();
		}
		public DesignatorContext designator(int i) {
			return GetRuleContext<DesignatorContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SLangGrammarParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SLangGrammarParser.Comma, i);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; Match(Input);
			State = 358; designator();
			State = 363;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Comma) {
				{
				{
				State = 359; Match(Comma);
				State = 360; designator();
				}
				}
				State = 365;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		public ITerminalNode Output() { return GetToken(SLangGrammarParser.Output, 0); }
		public DesignatorContext[] designator() {
			return GetRuleContexts<DesignatorContext>();
		}
		public DesignatorContext designator(int i) {
			return GetRuleContext<DesignatorContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SLangGrammarParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SLangGrammarParser.Comma, i);
		}
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_output);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366; Match(Output);
			State = 367; designator();
			State = 372;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Comma) {
				{
				{
				State = 368; Match(Comma);
				State = 369; designator();
				}
				}
				State = 374;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnCContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(SLangGrammarParser.Return, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ReturnCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnC; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterReturnC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitReturnC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnCContext returnC() {
		ReturnCContext _localctx = new ReturnCContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_returnC);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; Match(Return);
			State = 377;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & ((1L << (LBrace - 26)) | (1L << (New - 26)) | (1L << (AddOp - 26)) | (1L << (SubOp - 26)) | (1L << (BoolNot - 26)) | (1L << (IntValue - 26)) | (1L << (RealValue - 26)) | (1L << (BoolValue - 26)) | (1L << (Id - 26)) | (1L << (StringLiteral - 26)) | (1L << (SingleCharacter - 26)))) != 0)) {
				{
				State = 376; exp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public ITerminalNode Call() { return GetToken(SLangGrammarParser.Call, 0); }
		public QualidentContext qualident() {
			return GetRuleContext<QualidentContext>(0);
		}
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; Match(Call);
			State = 380; qualident();
			State = 381; Match(LBrace);
			State = 382; exprList();
			State = 383; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SLangGrammarParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SLangGrammarParser.Comma, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBrace:
			case New:
			case AddOp:
			case SubOp:
			case BoolNot:
			case IntValue:
			case RealValue:
			case BoolValue:
			case Id:
			case StringLiteral:
			case SingleCharacter:
				{
				State = 385; exp();
				State = 390;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==Comma) {
					{
					{
					State = 386; Match(Comma);
					State = 387; exp();
					}
					}
					State = 392;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case RBrace:
			case RSBrace:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public SimpleExprContext[] simpleExpr() {
			return GetRuleContexts<SimpleExprContext>();
		}
		public SimpleExprContext simpleExpr(int i) {
			return GetRuleContext<SimpleExprContext>(i);
		}
		public ITerminalNode Relation() { return GetToken(SLangGrammarParser.Relation, 0); }
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		ExpContext _localctx = new ExpContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_exp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; simpleExpr();
			State = 399;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Relation) {
				{
				State = 397; Match(Relation);
				State = 398; simpleExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExprContext : ParserRuleContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode[] AddictiveOp() { return GetTokens(SLangGrammarParser.AddictiveOp); }
		public ITerminalNode AddictiveOp(int i) {
			return GetToken(SLangGrammarParser.AddictiveOp, i);
		}
		public ITerminalNode AddOp() { return GetToken(SLangGrammarParser.AddOp, 0); }
		public ITerminalNode SubOp() { return GetToken(SLangGrammarParser.SubOp, 0); }
		public SimpleExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterSimpleExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitSimpleExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExprContext simpleExpr() {
		SimpleExprContext _localctx = new SimpleExprContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_simpleExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AddOp || _la==SubOp) {
				{
				State = 401;
				_la = _input.La(1);
				if ( !(_la==AddOp || _la==SubOp) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 404; term();
			State = 409;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AddictiveOp) {
				{
				{
				State = 405; Match(AddictiveOp);
				State = 406; term();
				}
				}
				State = 411;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public ITerminalNode[] MultiplicativeOp() { return GetTokens(SLangGrammarParser.MultiplicativeOp); }
		public ITerminalNode MultiplicativeOp(int i) {
			return GetToken(SLangGrammarParser.MultiplicativeOp, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; factor();
			State = 417;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==MultiplicativeOp) {
				{
				{
				State = 413; Match(MultiplicativeOp);
				State = 414; factor();
				}
				}
				State = 419;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode IntValue() { return GetToken(SLangGrammarParser.IntValue, 0); }
		public ITerminalNode RealValue() { return GetToken(SLangGrammarParser.RealValue, 0); }
		public ITerminalNode BoolValue() { return GetToken(SLangGrammarParser.BoolValue, 0); }
		public ITerminalNode StringLiteral() { return GetToken(SLangGrammarParser.StringLiteral, 0); }
		public ITerminalNode SingleCharacter() { return GetToken(SLangGrammarParser.SingleCharacter, 0); }
		public ITerminalNode BoolNot() { return GetToken(SLangGrammarParser.BoolNot, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public NewCContext newC() {
			return GetRuleContext<NewCContext>(0);
		}
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_factor);
		int _la;
		try {
			State = 429;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				State = 420; designator();
				}
				break;
			case IntValue:
			case RealValue:
			case BoolValue:
			case StringLiteral:
			case SingleCharacter:
				EnterOuterAlt(_localctx, 2);
				{
				State = 421;
				_la = _input.La(1);
				if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (IntValue - 73)) | (1L << (RealValue - 73)) | (1L << (BoolValue - 73)) | (1L << (StringLiteral - 73)) | (1L << (SingleCharacter - 73)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case BoolNot:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 422; Match(BoolNot);
				State = 423; factor();
				}
				}
				break;
			case New:
				EnterOuterAlt(_localctx, 4);
				{
				State = 424; newC();
				}
				break;
			case LBrace:
				EnterOuterAlt(_localctx, 5);
				{
				State = 425; Match(LBrace);
				State = 426; exp();
				State = 427; Match(RBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewCContext : ParserRuleContext {
		public ITerminalNode New() { return GetToken(SLangGrammarParser.New, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public CustomTypeContext customType() {
			return GetRuleContext<CustomTypeContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public NewCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newC; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterNewC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitNewC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewCContext newC() {
		NewCContext _localctx = new NewCContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_newC);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431; Match(New);
			State = 432; Match(LBrace);
			State = 433; customType();
			State = 434; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		public QualidentContext[] qualident() {
			return GetRuleContexts<QualidentContext>();
		}
		public QualidentContext qualident(int i) {
			return GetRuleContext<QualidentContext>(i);
		}
		public ITerminalNode[] Point() { return GetTokens(SLangGrammarParser.Point); }
		public ITerminalNode Point(int i) {
			return GetToken(SLangGrammarParser.Point, i);
		}
		public ITerminalNode[] Id() { return GetTokens(SLangGrammarParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(SLangGrammarParser.Id, i);
		}
		public ITerminalNode[] LSBrace() { return GetTokens(SLangGrammarParser.LSBrace); }
		public ITerminalNode LSBrace(int i) {
			return GetToken(SLangGrammarParser.LSBrace, i);
		}
		public ExprListContext[] exprList() {
			return GetRuleContexts<ExprListContext>();
		}
		public ExprListContext exprList(int i) {
			return GetRuleContext<ExprListContext>(i);
		}
		public ITerminalNode[] RSBrace() { return GetTokens(SLangGrammarParser.RSBrace); }
		public ITerminalNode RSBrace(int i) {
			return GetToken(SLangGrammarParser.RSBrace, i);
		}
		public ITerminalNode[] LBrace() { return GetTokens(SLangGrammarParser.LBrace); }
		public ITerminalNode LBrace(int i) {
			return GetToken(SLangGrammarParser.LBrace, i);
		}
		public ITerminalNode[] RBrace() { return GetTokens(SLangGrammarParser.RBrace); }
		public ITerminalNode RBrace(int i) {
			return GetToken(SLangGrammarParser.RBrace, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; qualident();
			State = 453;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Point) | (1L << LBrace) | (1L << LSBrace))) != 0)) {
				{
				State = 451;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					State = 437; Match(Point);
					State = 438; Match(Id);
					}
					break;

				case 2:
					{
					State = 439; Match(LSBrace);
					State = 440; exprList();
					State = 441; Match(RSBrace);
					}
					break;

				case 3:
					{
					State = 443; Match(LBrace);
					State = 444; qualident();
					State = 445; Match(RBrace);
					}
					break;

				case 4:
					{
					State = 447; Match(LBrace);
					State = 448; exprList();
					State = 449; Match(RBrace);
					}
					break;
				}
				}
				State = 455;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualidentContext : ParserRuleContext {
		public ITerminalNode[] Id() { return GetTokens(SLangGrammarParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(SLangGrammarParser.Id, i);
		}
		public ITerminalNode Point() { return GetToken(SLangGrammarParser.Point, 0); }
		public QualidentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualident; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterQualident(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitQualident(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualident(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualidentContext qualident() {
		QualidentContext _localctx = new QualidentContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_qualident);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 456; Match(Id);
				State = 457; Match(Point);
				}
				break;
			}
			State = 460; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3R\x1D1\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x3\x2\x3"+
		"\x2\x5\x2\x65\n\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3l\n\x3\x3\x4\x3"+
		"\x4\x3\x5\x3\x5\x3\x5\x5\x5s\n\x5\x3\x6\x3\x6\x3\a\x3\a\x6\ay\n\a\r\a"+
		"\xE\az\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\a\t\x83\n\t\f\t\xE\t\x86\v\t\x3\t"+
		"\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x5\v\x91\n\v\x3\f\x3\f\x3\f\x3"+
		"\f\x3\r\x3\r\x3\r\x3\r\a\r\x9B\n\r\f\r\xE\r\x9E\v\r\x3\xE\x3\xE\x5\xE"+
		"\xA2\n\xE\x3\xF\x3\xF\x3\xF\x5\xF\xA7\n\xF\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x5\x10\xAE\n\x10\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xB4\n\x11"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xBA\n\x12\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x14\x3\x14\x5\x14\xC4\n\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x15\x3\x15\x5\x15\xCB\n\x15\x3\x15\x3\x15\x3\x15\x5\x15\xD0\n\x15"+
		"\x3\x15\a\x15\xD3\n\x15\f\x15\xE\x15\xD6\v\x15\x3\x15\x3\x15\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x5\x18\xE4"+
		"\n\x18\x3\x18\x3\x18\x5\x18\xE8\n\x18\x3\x18\x5\x18\xEB\n\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\a\x1A\xFF\n\x1A\f\x1A\xE"+
		"\x1A\x102\v\x1A\x3\x1A\x5\x1A\x105\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x5"+
		"\x1C\x10B\n\x1C\x3\x1C\x3\x1C\x5\x1C\x10F\n\x1C\x3\x1C\x5\x1C\x112\n\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\a\x1E\x124\n\x1E\f\x1E\xE\x1E"+
		"\x127\v\x1E\x3\x1F\x3\x1F\x5\x1F\x12B\n\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x5"+
		" \x133\n \x3 \x3 \x3!\x3!\x3!\x5!\x13A\n!\x3\"\x3\"\x3\"\x3\"\x3\"\x3"+
		"#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\a#\x14E\n#\f#\xE#\x151"+
		"\v#\x3#\x3#\x5#\x155\n#\x3#\x3#\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3%\x3"+
		"%\x3%\x3%\x3%\x3%\x3%\x3&\x3&\x3&\x3&\a&\x16C\n&\f&\xE&\x16F\v&\x3\'\x3"+
		"\'\x3\'\x3\'\a\'\x175\n\'\f\'\xE\'\x178\v\'\x3(\x3(\x5(\x17C\n(\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3*\x3*\x3*\a*\x187\n*\f*\xE*\x18A\v*\x3*\x5*\x18D\n"+
		"*\x3+\x3+\x3+\x5+\x192\n+\x3,\x5,\x195\n,\x3,\x3,\x3,\a,\x19A\n,\f,\xE"+
		",\x19D\v,\x3-\x3-\x3-\a-\x1A2\n-\f-\xE-\x1A5\v-\x3.\x3.\x3.\x3.\x3.\x3"+
		".\x3.\x3.\x3.\x5.\x1B0\n.\x3/\x3/\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3"+
		"\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3"+
		"\x30\x3\x30\a\x30\x1C6\n\x30\f\x30\xE\x30\x1C9\v\x30\x3\x31\x3\x31\x5"+
		"\x31\x1CD\n\x31\x3\x31\x3\x31\x3\x31\x2\x2\x2\x32\x2\x2\x4\x2\x6\x2\b"+
		"\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2"+
		":\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2"+
		"X\x2Z\x2\\\x2^\x2`\x2\x2\x5\x3\x2\x36\x37\x3\x2=>\x4\x2KMOP\x1DA\x2\x64"+
		"\x3\x2\x2\x2\x4\x66\x3\x2\x2\x2\x6m\x3\x2\x2\x2\br\x3\x2\x2\x2\nt\x3\x2"+
		"\x2\x2\fv\x3\x2\x2\x2\xE~\x3\x2\x2\x2\x10\x84\x3\x2\x2\x2\x12\x89\x3\x2"+
		"\x2\x2\x14\x8C\x3\x2\x2\x2\x16\x92\x3\x2\x2\x2\x18\x9C\x3\x2\x2\x2\x1A"+
		"\xA1\x3\x2\x2\x2\x1C\xA6\x3\x2\x2\x2\x1E\xA8\x3\x2\x2\x2 \xAF\x3\x2\x2"+
		"\x2\"\xB5\x3\x2\x2\x2$\xBB\x3\x2\x2\x2&\xC1\x3\x2\x2\x2(\xC8\x3\x2\x2"+
		"\x2*\xD9\x3\x2\x2\x2,\xDE\x3\x2\x2\x2.\xE3\x3\x2\x2\x2\x30\xF6\x3\x2\x2"+
		"\x2\x32\x104\x3\x2\x2\x2\x34\x106\x3\x2\x2\x2\x36\x10A\x3\x2\x2\x2\x38"+
		"\x11B\x3\x2\x2\x2:\x125\x3\x2\x2\x2<\x12A\x3\x2\x2\x2>\x132\x3\x2\x2\x2"+
		"@\x139\x3\x2\x2\x2\x42\x13B\x3\x2\x2\x2\x44\x140\x3\x2\x2\x2\x46\x158"+
		"\x3\x2\x2\x2H\x160\x3\x2\x2\x2J\x167\x3\x2\x2\x2L\x170\x3\x2\x2\x2N\x179"+
		"\x3\x2\x2\x2P\x17D\x3\x2\x2\x2R\x18C\x3\x2\x2\x2T\x18E\x3\x2\x2\x2V\x194"+
		"\x3\x2\x2\x2X\x19E\x3\x2\x2\x2Z\x1AF\x3\x2\x2\x2\\\x1B1\x3\x2\x2\x2^\x1B6"+
		"\x3\x2\x2\x2`\x1CC\x3\x2\x2\x2\x62\x65\x5\b\x5\x2\x63\x65\x5\f\a\x2\x64"+
		"\x62\x3\x2\x2\x2\x64\x63\x3\x2\x2\x2\x65\x3\x3\x2\x2\x2\x66k\a+\x2\x2"+
		"gh\a\x1C\x2\x2hi\x5\x6\x4\x2ij\a\x1D\x2\x2jl\x3\x2\x2\x2kg\x3\x2\x2\x2"+
		"kl\x3\x2\x2\x2l\x5\x3\x2\x2\x2mn\x5`\x31\x2n\a\x3\x2\x2\x2os\x5\n\x6\x2"+
		"ps\x5\x6\x4\x2qs\x5\x4\x3\x2ro\x3\x2\x2\x2rp\x3\x2\x2\x2rq\x3\x2\x2\x2"+
		"s\t\x3\x2\x2\x2tu\a\x39\x2\x2u\v\x3\x2\x2\x2vx\a,\x2\x2wy\x5\xE\b\x2x"+
		"w\x3\x2\x2\x2yz\x3\x2\x2\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{|\x3\x2\x2\x2"+
		"|}\x5\b\x5\x2}\r\x3\x2\x2\x2~\x7F\a\x1E\x2\x2\x7F\x80\a\x1F\x2\x2\x80"+
		"\xF\x3\x2\x2\x2\x81\x83\x5\x12\n\x2\x82\x81\x3\x2\x2\x2\x83\x86\x3\x2"+
		"\x2\x2\x84\x82\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x87\x3\x2\x2\x2\x86"+
		"\x84\x3\x2\x2\x2\x87\x88\x5\x14\v\x2\x88\x11\x3\x2\x2\x2\x89\x8A\a\x17"+
		"\x2\x2\x8A\x8B\aN\x2\x2\x8B\x13\x3\x2\x2\x2\x8C\x8D\a\x16\x2\x2\x8D\x8E"+
		"\aN\x2\x2\x8E\x90\x5\x18\r\x2\x8F\x91\x5\x16\f\x2\x90\x8F\x3\x2\x2\x2"+
		"\x90\x91\x3\x2\x2\x2\x91\x15\x3\x2\x2\x2\x92\x93\a\x18\x2\x2\x93\x94\x5"+
		":\x1E\x2\x94\x95\a\x19\x2\x2\x95\x17\x3\x2\x2\x2\x96\x9B\x5.\x18\x2\x97"+
		"\x9B\x5\x36\x1C\x2\x98\x9B\x5(\x15\x2\x99\x9B\x5&\x14\x2\x9A\x96\x3\x2"+
		"\x2\x2\x9A\x97\x3\x2\x2\x2\x9A\x98\x3\x2\x2\x2\x9A\x99\x3\x2\x2\x2\x9B"+
		"\x9E\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x19\x3\x2"+
		"\x2\x2\x9E\x9C\x3\x2\x2\x2\x9F\xA2\x5\x1C\xF\x2\xA0\xA2\x5$\x13\x2\xA1"+
		"\x9F\x3\x2\x2\x2\xA1\xA0\x3\x2\x2\x2\xA2\x1B\x3\x2\x2\x2\xA3\xA7\x5\x1E"+
		"\x10\x2\xA4\xA7\x5 \x11\x2\xA5\xA7\x5\"\x12\x2\xA6\xA3\x3\x2\x2\x2\xA6"+
		"\xA4\x3\x2\x2\x2\xA6\xA5\x3\x2\x2\x2\xA7\x1D\x3\x2\x2\x2\xA8\xA9\a\a\x2"+
		"\x2\xA9\xAA\x5\n\x6\x2\xAA\xAD\aN\x2\x2\xAB\xAC\a\"\x2\x2\xAC\xAE\x5T"+
		"+\x2\xAD\xAB\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\x1F\x3\x2\x2\x2\xAF\xB0"+
		"\x5\f\a\x2\xB0\xB3\aN\x2\x2\xB1\xB2\a\"\x2\x2\xB2\xB4\x5T+\x2\xB3\xB1"+
		"\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4!\x3\x2\x2\x2\xB5\xB6\x5\x4\x3\x2"+
		"\xB6\xB9\aN\x2\x2\xB7\xB8\a\"\x2\x2\xB8\xBA\x5T+\x2\xB9\xB7\x3\x2\x2\x2"+
		"\xB9\xBA\x3\x2\x2\x2\xBA#\x3\x2\x2\x2\xBB\xBC\a\b\x2\x2\xBC\xBD\x5\x2"+
		"\x2\x2\xBD\xBE\aN\x2\x2\xBE\xBF\a\"\x2\x2\xBF\xC0\x5T+\x2\xC0%\x3\x2\x2"+
		"\x2\xC1\xC3\a\x30\x2\x2\xC2\xC4\a\xE\x2\x2\xC3\xC2\x3\x2\x2\x2\xC3\xC4"+
		"\x3\x2\x2\x2\xC4\xC5\x3\x2\x2\x2\xC5\xC6\x5\x1C\xF\x2\xC6\xC7\a\x4\x2"+
		"\x2\xC7\'\x3\x2\x2\x2\xC8\xCA\a\x30\x2\x2\xC9\xCB\a\x35\x2\x2\xCA\xC9"+
		"\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\xCD\a\x33\x2"+
		"\x2\xCD\xCF\aN\x2\x2\xCE\xD0\x5*\x16\x2\xCF\xCE\x3\x2\x2\x2\xCF\xD0\x3"+
		"\x2\x2\x2\xD0\xD4\x3\x2\x2\x2\xD1\xD3\x5,\x17\x2\xD2\xD1\x3\x2\x2\x2\xD3"+
		"\xD6\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\xD7\x3\x2"+
		"\x2\x2\xD6\xD4\x3\x2\x2\x2\xD7\xD8\a\x19\x2\x2\xD8)\x3\x2\x2\x2\xD9\xDA"+
		"\a\x34\x2\x2\xDA\xDB\a\x1C\x2\x2\xDB\xDC\x5\x6\x4\x2\xDC\xDD\a\x1D\x2"+
		"\x2\xDD+\x3\x2\x2\x2\xDE\xDF\a\x30\x2\x2\xDF\xE0\x5\x1C\xF\x2\xE0\xE1"+
		"\a\x4\x2\x2\xE1-\x3\x2\x2\x2\xE2\xE4\x5\x38\x1D\x2\xE3\xE2\x3\x2\x2\x2"+
		"\xE3\xE4\x3\x2\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE7\a\x30\x2\x2\xE6\xE8\t"+
		"\x2\x2\x2\xE7\xE6\x3\x2\x2\x2\xE7\xE8\x3\x2\x2\x2\xE8\xEA\x3\x2\x2\x2"+
		"\xE9\xEB\x5\x30\x19\x2\xEA\xE9\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB\xEC"+
		"\x3\x2\x2\x2\xEC\xED\a\x1A\x2\x2\xED\xEE\a\x1C\x2\x2\xEE\xEF\x5\x32\x1A"+
		"\x2\xEF\xF0\a\x1D\x2\x2\xF0\xF1\a\x3\x2\x2\xF1\xF2\x5\x2\x2\x2\xF2\xF3"+
		"\aN\x2\x2\xF3\xF4\x5:\x1E\x2\xF4\xF5\a\x19\x2\x2\xF5/\x3\x2\x2\x2\xF6"+
		"\xF7\a\x1C\x2\x2\xF7\xF8\x5\x6\x4\x2\xF8\xF9\aN\x2\x2\xF9\xFA\a\x1D\x2"+
		"\x2\xFA\x31\x3\x2\x2\x2\xFB\x100\x5\x34\x1B\x2\xFC\xFD\a\x5\x2\x2\xFD"+
		"\xFF\x5\x34\x1B\x2\xFE\xFC\x3\x2\x2\x2\xFF\x102\x3\x2\x2\x2\x100\xFE\x3"+
		"\x2\x2\x2\x100\x101\x3\x2\x2\x2\x101\x105\x3\x2\x2\x2\x102\x100\x3\x2"+
		"\x2\x2\x103\x105\x3\x2\x2\x2\x104\xFB\x3\x2\x2\x2\x104\x103\x3\x2\x2\x2"+
		"\x105\x33\x3\x2\x2\x2\x106\x107\a-\x2\x2\x107\x108\aN\x2\x2\x108\x35\x3"+
		"\x2\x2\x2\x109\x10B\x5\x38\x1D\x2\x10A\x109\x3\x2\x2\x2\x10A\x10B\x3\x2"+
		"\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10E\a\x30\x2\x2\x10D\x10F\t\x2\x2\x2"+
		"\x10E\x10D\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x111\x3\x2\x2\x2\x110"+
		"\x112\x5\x30\x19\x2\x111\x110\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112\x113"+
		"\x3\x2\x2\x2\x113\x114\a\x1B\x2\x2\x114\x115\a\x1C\x2\x2\x115\x116\x5"+
		"\x32\x1A\x2\x116\x117\a\x1D\x2\x2\x117\x118\aN\x2\x2\x118\x119\x5:\x1E"+
		"\x2\x119\x11A\a\x19\x2\x2\x11A\x37\x3\x2\x2\x2\x11B\x11C\a\x1E\x2\x2\x11C"+
		"\x11D\a\x38\x2\x2\x11D\x11E\aO\x2\x2\x11E\x11F\a\x17\x2\x2\x11F\x120\a"+
		"O\x2\x2\x120\x121\a\x1F\x2\x2\x121\x39\x3\x2\x2\x2\x122\x124\x5<\x1F\x2"+
		"\x123\x122\x3\x2\x2\x2\x124\x127\x3\x2\x2\x2\x125\x123\x3\x2\x2\x2\x125"+
		"\x126\x3\x2\x2\x2\x126;\x3\x2\x2\x2\x127\x125\x3\x2\x2\x2\x128\x12B\x5"+
		"> \x2\x129\x12B\x5@!\x2\x12A\x128\x3\x2\x2\x2\x12A\x129\x3\x2\x2\x2\x12B"+
		"=\x3\x2\x2\x2\x12C\x133\x5\x1A\xE\x2\x12D\x133\x5\x42\"\x2\x12E\x133\x5"+
		"J&\x2\x12F\x133\x5L\'\x2\x130\x133\x5N(\x2\x131\x133\x5P)\x2\x132\x12C"+
		"\x3\x2\x2\x2\x132\x12D\x3\x2\x2\x2\x132\x12E\x3\x2\x2\x2\x132\x12F\x3"+
		"\x2\x2\x2\x132\x130\x3\x2\x2\x2\x132\x131\x3\x2\x2\x2\x133\x134\x3\x2"+
		"\x2\x2\x134\x135\a\x4\x2\x2\x135?\x3\x2\x2\x2\x136\x13A\x5\x44#\x2\x137"+
		"\x13A\x5\x46$\x2\x138\x13A\x5H%\x2\x139\x136\x3\x2\x2\x2\x139\x137\x3"+
		"\x2\x2\x2\x139\x138\x3\x2\x2\x2\x13A\x41\x3\x2\x2\x2\x13B\x13C\a\t\x2"+
		"\x2\x13C\x13D\x5^\x30\x2\x13D\x13E\a\"\x2\x2\x13E\x13F\x5T+\x2\x13F\x43"+
		"\x3\x2\x2\x2\x140\x141\a\xF\x2\x2\x141\x142\a\x1C\x2\x2\x142\x143\x5T"+
		"+\x2\x143\x144\a\x1D\x2\x2\x144\x145\a\x10\x2\x2\x145\x14F\x5:\x1E\x2"+
		"\x146\x147\a\x14\x2\x2\x147\x148\a\x1C\x2\x2\x148\x149\x5T+\x2\x149\x14A"+
		"\a\x1D\x2\x2\x14A\x14B\a\x10\x2\x2\x14B\x14C\x5:\x1E\x2\x14C\x14E\x3\x2"+
		"\x2\x2\x14D\x146\x3\x2\x2\x2\x14E\x151\x3\x2\x2\x2\x14F\x14D\x3\x2\x2"+
		"\x2\x14F\x150\x3\x2\x2\x2\x150\x154\x3\x2\x2\x2\x151\x14F\x3\x2\x2\x2"+
		"\x152\x153\a\x11\x2\x2\x153\x155\x5:\x1E\x2\x154\x152\x3\x2\x2\x2\x154"+
		"\x155\x3\x2\x2\x2\x155\x156\x3\x2\x2\x2\x156\x157\a\x19\x2\x2\x157\x45"+
		"\x3\x2\x2\x2\x158\x159\a\x12\x2\x2\x159\x15A\a\x1C\x2\x2\x15A\x15B\x5"+
		"T+\x2\x15B\x15C\a\x1D\x2\x2\x15C\x15D\a\x15\x2\x2\x15D\x15E\x5:\x1E\x2"+
		"\x15E\x15F\a\x19\x2\x2\x15FG\x3\x2\x2\x2\x160\x161\a\x13\x2\x2\x161\x162"+
		"\x5:\x1E\x2\x162\x163\a\x12\x2\x2\x163\x164\a\x1C\x2\x2\x164\x165\x5T"+
		"+\x2\x165\x166\a\x1D\x2\x2\x166I\x3\x2\x2\x2\x167\x168\a\v\x2\x2\x168"+
		"\x16D\x5^\x30\x2\x169\x16A\a\x5\x2\x2\x16A\x16C\x5^\x30\x2\x16B\x169\x3"+
		"\x2\x2\x2\x16C\x16F\x3\x2\x2\x2\x16D\x16B\x3\x2\x2\x2\x16D\x16E\x3\x2"+
		"\x2\x2\x16EK\x3\x2\x2\x2\x16F\x16D\x3\x2\x2\x2\x170\x171\a\f\x2\x2\x171"+
		"\x176\x5^\x30\x2\x172\x173\a\x5\x2\x2\x173\x175\x5^\x30\x2\x174\x172\x3"+
		"\x2\x2\x2\x175\x178\x3\x2\x2\x2\x176\x174\x3\x2\x2\x2\x176\x177\x3\x2"+
		"\x2\x2\x177M\x3\x2\x2\x2\x178\x176\x3\x2\x2\x2\x179\x17B\a\n\x2\x2\x17A"+
		"\x17C\x5T+\x2\x17B\x17A\x3\x2\x2\x2\x17B\x17C\x3\x2\x2\x2\x17CO\x3\x2"+
		"\x2\x2\x17D\x17E\a\r\x2\x2\x17E\x17F\x5`\x31\x2\x17F\x180\a\x1C\x2\x2"+
		"\x180\x181\x5R*\x2\x181\x182\a\x1D\x2\x2\x182Q\x3\x2\x2\x2\x183\x188\x5"+
		"T+\x2\x184\x185\a\x5\x2\x2\x185\x187\x5T+\x2\x186\x184\x3\x2\x2\x2\x187"+
		"\x18A\x3\x2\x2\x2\x188\x186\x3\x2\x2\x2\x188\x189\x3\x2\x2\x2\x189\x18D"+
		"\x3\x2\x2\x2\x18A\x188\x3\x2\x2\x2\x18B\x18D\x3\x2\x2\x2\x18C\x183\x3"+
		"\x2\x2\x2\x18C\x18B\x3\x2\x2\x2\x18DS\x3\x2\x2\x2\x18E\x191\x5V,\x2\x18F"+
		"\x190\a:\x2\x2\x190\x192\x5V,\x2\x191\x18F\x3\x2\x2\x2\x191\x192\x3\x2"+
		"\x2\x2\x192U\x3\x2\x2\x2\x193\x195\t\x3\x2\x2\x194\x193\x3\x2\x2\x2\x194"+
		"\x195\x3\x2\x2\x2\x195\x196\x3\x2\x2\x2\x196\x19B\x5X-\x2\x197\x198\a"+
		";\x2\x2\x198\x19A\x5X-\x2\x199\x197\x3\x2\x2\x2\x19A\x19D\x3\x2\x2\x2"+
		"\x19B\x199\x3\x2\x2\x2\x19B\x19C\x3\x2\x2\x2\x19CW\x3\x2\x2\x2\x19D\x19B"+
		"\x3\x2\x2\x2\x19E\x1A3\x5Z.\x2\x19F\x1A0\a<\x2\x2\x1A0\x1A2\x5Z.\x2\x1A1"+
		"\x19F\x3\x2\x2\x2\x1A2\x1A5\x3\x2\x2\x2\x1A3\x1A1\x3\x2\x2\x2\x1A3\x1A4"+
		"\x3\x2\x2\x2\x1A4Y\x3\x2\x2\x2\x1A5\x1A3\x3\x2\x2\x2\x1A6\x1B0\x5^\x30"+
		"\x2\x1A7\x1B0\t\x4\x2\x2\x1A8\x1A9\aJ\x2\x2\x1A9\x1B0\x5Z.\x2\x1AA\x1B0"+
		"\x5\\/\x2\x1AB\x1AC\a\x1C\x2\x2\x1AC\x1AD\x5T+\x2\x1AD\x1AE\a\x1D\x2\x2"+
		"\x1AE\x1B0\x3\x2\x2\x2\x1AF\x1A6\x3\x2\x2\x2\x1AF\x1A7\x3\x2\x2\x2\x1AF"+
		"\x1A8\x3\x2\x2\x2\x1AF\x1AA\x3\x2\x2\x2\x1AF\x1AB\x3\x2\x2\x2\x1B0[\x3"+
		"\x2\x2\x2\x1B1\x1B2\a)\x2\x2\x1B2\x1B3\a\x1C\x2\x2\x1B3\x1B4\x5\x6\x4"+
		"\x2\x1B4\x1B5\a\x1D\x2\x2\x1B5]\x3\x2\x2\x2\x1B6\x1C7\x5`\x31\x2\x1B7"+
		"\x1B8\a\x6\x2\x2\x1B8\x1C6\aN\x2\x2\x1B9\x1BA\a\x1E\x2\x2\x1BA\x1BB\x5"+
		"R*\x2\x1BB\x1BC\a\x1F\x2\x2\x1BC\x1C6\x3\x2\x2\x2\x1BD\x1BE\a\x1C\x2\x2"+
		"\x1BE\x1BF\x5`\x31\x2\x1BF\x1C0\a\x1D\x2\x2\x1C0\x1C6\x3\x2\x2\x2\x1C1"+
		"\x1C2\a\x1C\x2\x2\x1C2\x1C3\x5R*\x2\x1C3\x1C4\a\x1D\x2\x2\x1C4\x1C6\x3"+
		"\x2\x2\x2\x1C5\x1B7\x3\x2\x2\x2\x1C5\x1B9\x3\x2\x2\x2\x1C5\x1BD\x3\x2"+
		"\x2\x2\x1C5\x1C1\x3\x2\x2\x2\x1C6\x1C9\x3\x2\x2\x2\x1C7\x1C5\x3\x2\x2"+
		"\x2\x1C7\x1C8\x3\x2\x2\x2\x1C8_\x3\x2\x2\x2\x1C9\x1C7\x3\x2\x2\x2\x1CA"+
		"\x1CB\aN\x2\x2\x1CB\x1CD\a\x6\x2\x2\x1CC\x1CA\x3\x2\x2\x2\x1CC\x1CD\x3"+
		"\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE\x1CF\aN\x2\x2\x1CF\x61\x3\x2\x2\x2"+
		".\x64krz\x84\x90\x9A\x9C\xA1\xA6\xAD\xB3\xB9\xC3\xCA\xCF\xD4\xE3\xE7\xEA"+
		"\x100\x104\x10A\x10E\x111\x125\x12A\x132\x139\x14F\x154\x16D\x176\x17B"+
		"\x188\x18C\x191\x194\x19B\x1A3\x1AF\x1C5\x1C7\x1CC";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SLangGrammar
