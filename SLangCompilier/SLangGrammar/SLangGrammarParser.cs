//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SLangGrammar.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SLangGrammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class SLangGrammarParser : Parser {
	public const int
		SimpleType=1, AddOp=2, SubOp=3, MulOp=4, DivOp=5, ModOp=6, BoolOr=7, BoolAnd=8, 
		BoolEq=9, BoolNeq=10, BoolG=11, BoolL=12, BoolGeq=13, BoolLeq=14, BoolNot=15, 
		Colon=16, Semicolon=17, Comma=18, Point=19, Variable=20, Const=21, Let=22, 
		Return=23, Input=24, Output=25, Call=26, Readonly=27, If=28, Then=29, 
		Else=30, While=31, Repeat=32, Elseif=33, Do=34, Module=35, Import=36, 
		Start=37, End=38, Function=39, Procedure=40, LBrace=41, RBrace=42, LSBrace=43, 
		RSBrace=44, Assign=45, New=46, Nil=47, Pointer=48, Array=49, FunctionArgModifier=50, 
		AccessModifier=51, Class=52, Inherit=53, Base=54, Abstract=55, Override=56, 
		File=57, IntValue=58, RealValue=59, BoolValue=60, Id=61, StringLiteral=62, 
		SingleCharacter=63, Comment=64, Ws=65;
	public const int
		RULE_start = 0, RULE_moduleImport = 1, RULE_module = 2, RULE_moduleStatementsSeq = 3, 
		RULE_moduleDeclareSeq = 4, RULE_declare = 5, RULE_variableDecl = 6, RULE_simpleDecl = 7, 
		RULE_arrayDecl = 8, RULE_arrayDeclType = 9, RULE_ptrDecl = 10, RULE_constDecl = 11, 
		RULE_moduleFieldDecl = 12, RULE_typeName = 13, RULE_ptrType = 14, RULE_customType = 15, 
		RULE_scalarType = 16, RULE_simpleType = 17, RULE_arrayType = 18, RULE_arrayDimention = 19, 
		RULE_typeDecl = 20, RULE_typeInherit = 21, RULE_typeFieldDecl = 22, RULE_functionDecl = 23, 
		RULE_thisHeader = 24, RULE_routineArgList = 25, RULE_routineArg = 26, 
		RULE_procedureDecl = 27, RULE_importHead = 28, RULE_statementSeq = 29, 
		RULE_statement = 30, RULE_simpleStatement = 31, RULE_complexStatement = 32, 
		RULE_let = 33, RULE_input = 34, RULE_output = 35, RULE_returnC = 36, RULE_call = 37, 
		RULE_ifC = 38, RULE_whileC = 39, RULE_repeatC = 40, RULE_exprList = 41, 
		RULE_exp = 42, RULE_simpleExpr = 43, RULE_term = 44, RULE_signedFactor = 45, 
		RULE_factor = 46, RULE_newC = 47, RULE_designator = 48, RULE_designatorStatement = 49, 
		RULE_qualident = 50;
	public static readonly string[] ruleNames = {
		"start", "moduleImport", "module", "moduleStatementsSeq", "moduleDeclareSeq", 
		"declare", "variableDecl", "simpleDecl", "arrayDecl", "arrayDeclType", 
		"ptrDecl", "constDecl", "moduleFieldDecl", "typeName", "ptrType", "customType", 
		"scalarType", "simpleType", "arrayType", "arrayDimention", "typeDecl", 
		"typeInherit", "typeFieldDecl", "functionDecl", "thisHeader", "routineArgList", 
		"routineArg", "procedureDecl", "importHead", "statementSeq", "statement", 
		"simpleStatement", "complexStatement", "let", "input", "output", "returnC", 
		"call", "ifC", "whileC", "repeatC", "exprList", "exp", "simpleExpr", "term", 
		"signedFactor", "factor", "newC", "designator", "designatorStatement", 
		"qualident"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'+'", "'-'", "'*'", "'/'", "'%'", "'||'", "'&&'", "'=='", 
		"'!='", "'>'", "'<'", "'>='", "'<='", "'!'", "':'", "';'", "','", "'.'", 
		"'variable'", "'const'", "'let'", "'return'", "'input'", "'output'", "'call'", 
		"'readonly'", "'if'", "'then'", "'else'", "'while'", "'repeat'", "'elseif'", 
		"'do'", "'module'", "'import'", "'start'", "'end'", "'function'", "'procedure'", 
		"'('", "')'", "'['", "']'", "':='", "'new'", "'nil'", "'pointer'", "'array'", 
		null, null, "'class'", "'inherit'", "'base'", "'abstract'", "'override'", 
		"'file'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SimpleType", "AddOp", "SubOp", "MulOp", "DivOp", "ModOp", "BoolOr", 
		"BoolAnd", "BoolEq", "BoolNeq", "BoolG", "BoolL", "BoolGeq", "BoolLeq", 
		"BoolNot", "Colon", "Semicolon", "Comma", "Point", "Variable", "Const", 
		"Let", "Return", "Input", "Output", "Call", "Readonly", "If", "Then", 
		"Else", "While", "Repeat", "Elseif", "Do", "Module", "Import", "Start", 
		"End", "Function", "Procedure", "LBrace", "RBrace", "LSBrace", "RSBrace", 
		"Assign", "New", "Nil", "Pointer", "Array", "FunctionArgModifier", "AccessModifier", 
		"Class", "Inherit", "Base", "Abstract", "Override", "File", "IntValue", 
		"RealValue", "BoolValue", "Id", "StringLiteral", "SingleCharacter", "Comment", 
		"Ws"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SLangGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SLangGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartContext : ParserRuleContext {
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public ModuleImportContext[] moduleImport() {
			return GetRuleContexts<ModuleImportContext>();
		}
		public ModuleImportContext moduleImport(int i) {
			return GetRuleContext<ModuleImportContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Import) {
				{
				{
				State = 102; moduleImport();
				}
				}
				State = 107;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 108; module();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleImportContext : ParserRuleContext {
		public ITerminalNode Import() { return GetToken(SLangGrammarParser.Import, 0); }
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ModuleImportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleImport; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterModuleImport(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitModuleImport(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleImport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleImportContext moduleImport() {
		ModuleImportContext _localctx = new ModuleImportContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_moduleImport);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(Import);
			State = 111; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public ITerminalNode Module() { return GetToken(SLangGrammarParser.Module, 0); }
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ModuleDeclareSeqContext moduleDeclareSeq() {
			return GetRuleContext<ModuleDeclareSeqContext>(0);
		}
		public ModuleStatementsSeqContext moduleStatementsSeq() {
			return GetRuleContext<ModuleStatementsSeqContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(Module);
			State = 114; Match(Id);
			State = 115; moduleDeclareSeq();
			State = 117;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Start) {
				{
				State = 116; moduleStatementsSeq();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleStatementsSeqContext : ParserRuleContext {
		public ITerminalNode Start() { return GetToken(SLangGrammarParser.Start, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLangGrammarParser.End, 0); }
		public ModuleStatementsSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleStatementsSeq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterModuleStatementsSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitModuleStatementsSeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleStatementsSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleStatementsSeqContext moduleStatementsSeq() {
		ModuleStatementsSeqContext _localctx = new ModuleStatementsSeqContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleStatementsSeq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(Start);
			State = 120; statementSeq();
			State = 121; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclareSeqContext : ParserRuleContext {
		public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		public ProcedureDeclContext[] procedureDecl() {
			return GetRuleContexts<ProcedureDeclContext>();
		}
		public ProcedureDeclContext procedureDecl(int i) {
			return GetRuleContext<ProcedureDeclContext>(i);
		}
		public TypeDeclContext[] typeDecl() {
			return GetRuleContexts<TypeDeclContext>();
		}
		public TypeDeclContext typeDecl(int i) {
			return GetRuleContext<TypeDeclContext>(i);
		}
		public ModuleFieldDeclContext[] moduleFieldDecl() {
			return GetRuleContexts<ModuleFieldDeclContext>();
		}
		public ModuleFieldDeclContext moduleFieldDecl(int i) {
			return GetRuleContext<ModuleFieldDeclContext>(i);
		}
		public ModuleDeclareSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclareSeq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterModuleDeclareSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitModuleDeclareSeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclareSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclareSeqContext moduleDeclareSeq() {
		ModuleDeclareSeqContext _localctx = new ModuleDeclareSeqContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleDeclareSeq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LSBrace || _la==AccessModifier) {
				{
				State = 127;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
				case 1:
					{
					State = 123; functionDecl();
					}
					break;

				case 2:
					{
					State = 124; procedureDecl();
					}
					break;

				case 3:
					{
					State = 125; typeDecl();
					}
					break;

				case 4:
					{
					State = 126; moduleFieldDecl();
					}
					break;
				}
				}
				State = 131;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public VariableDeclContext variableDecl() {
			return GetRuleContext<VariableDeclContext>(0);
		}
		public ConstDeclContext constDecl() {
			return GetRuleContext<ConstDeclContext>(0);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_declare);
		try {
			State = 134;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Variable:
			case Pointer:
			case Array:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132; variableDecl();
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133; constDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclContext : ParserRuleContext {
		public SimpleDeclContext simpleDecl() {
			return GetRuleContext<SimpleDeclContext>(0);
		}
		public ArrayDeclContext arrayDecl() {
			return GetRuleContext<ArrayDeclContext>(0);
		}
		public PtrDeclContext ptrDecl() {
			return GetRuleContext<PtrDeclContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(SLangGrammarParser.Assign, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VariableDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterVariableDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitVariableDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclContext variableDecl() {
		VariableDeclContext _localctx = new VariableDeclContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_variableDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Variable:
				{
				State = 136; simpleDecl();
				}
				break;
			case Array:
				{
				State = 137; arrayDecl();
				}
				break;
			case Pointer:
				{
				State = 138; ptrDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 143;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Assign) {
				{
				State = 141; Match(Assign);
				State = 142; exp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleDeclContext : ParserRuleContext {
		public ITerminalNode Variable() { return GetToken(SLangGrammarParser.Variable, 0); }
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public CustomTypeContext customType() {
			return GetRuleContext<CustomTypeContext>(0);
		}
		public SimpleDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterSimpleDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitSimpleDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleDeclContext simpleDecl() {
		SimpleDeclContext _localctx = new SimpleDeclContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_simpleDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(Variable);
			State = 148;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SimpleType:
				{
				State = 146; simpleType();
				}
				break;
			case Id:
				{
				State = 147; customType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 150; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclContext : ParserRuleContext {
		public ArrayDeclTypeContext arrayDeclType() {
			return GetRuleContext<ArrayDeclTypeContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ArrayDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterArrayDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitArrayDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclContext arrayDecl() {
		ArrayDeclContext _localctx = new ArrayDeclContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_arrayDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; arrayDeclType();
			State = 153; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclTypeContext : ParserRuleContext {
		public ITerminalNode Array() { return GetToken(SLangGrammarParser.Array, 0); }
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public ITerminalNode[] LSBrace() { return GetTokens(SLangGrammarParser.LSBrace); }
		public ITerminalNode LSBrace(int i) {
			return GetToken(SLangGrammarParser.LSBrace, i);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] RSBrace() { return GetTokens(SLangGrammarParser.RSBrace); }
		public ITerminalNode RSBrace(int i) {
			return GetToken(SLangGrammarParser.RSBrace, i);
		}
		public ArrayDeclTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterArrayDeclType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitArrayDeclType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclTypeContext arrayDeclType() {
		ArrayDeclTypeContext _localctx = new ArrayDeclTypeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_arrayDeclType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(Array);
			State = 160;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 156; Match(LSBrace);
				State = 157; exp();
				State = 158; Match(RSBrace);
				}
				}
				State = 162;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LSBrace );
			State = 164; scalarType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrDeclContext : ParserRuleContext {
		public PtrTypeContext ptrType() {
			return GetRuleContext<PtrTypeContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public PtrDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterPtrDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitPtrDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtrDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtrDeclContext ptrDecl() {
		PtrDeclContext _localctx = new PtrDeclContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_ptrDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; ptrType();
			State = 167; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclContext : ParserRuleContext {
		public ITerminalNode Const() { return GetToken(SLangGrammarParser.Const, 0); }
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ITerminalNode Assign() { return GetToken(SLangGrammarParser.Assign, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ConstDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterConstDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitConstDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclContext constDecl() {
		ConstDeclContext _localctx = new ConstDeclContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_constDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(Const);
			State = 170; scalarType();
			State = 171; Match(Id);
			State = 172; Match(Assign);
			State = 173; exp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleFieldDeclContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLangGrammarParser.AccessModifier, 0); }
		public ITerminalNode Semicolon() { return GetToken(SLangGrammarParser.Semicolon, 0); }
		public VariableDeclContext variableDecl() {
			return GetRuleContext<VariableDeclContext>(0);
		}
		public ConstDeclContext constDecl() {
			return GetRuleContext<ConstDeclContext>(0);
		}
		public ITerminalNode Readonly() { return GetToken(SLangGrammarParser.Readonly, 0); }
		public ModuleFieldDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleFieldDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterModuleFieldDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitModuleFieldDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleFieldDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleFieldDeclContext moduleFieldDecl() {
		ModuleFieldDeclContext _localctx = new ModuleFieldDeclContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_moduleFieldDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(AccessModifier);
			State = 181;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Variable:
			case Readonly:
			case Pointer:
			case Array:
				{
				State = 177;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Readonly) {
					{
					State = 176; Match(Readonly);
					}
				}

				State = 179; variableDecl();
				}
				break;
			case Const:
				{
				State = 180; constDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 183; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_typeName);
		try {
			State = 187;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SimpleType:
			case Pointer:
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				State = 185; scalarType();
				}
				break;
			case Array:
				EnterOuterAlt(_localctx, 2);
				{
				State = 186; arrayType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrTypeContext : ParserRuleContext {
		public ITerminalNode Pointer() { return GetToken(SLangGrammarParser.Pointer, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public CustomTypeContext customType() {
			return GetRuleContext<CustomTypeContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public PtrTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterPtrType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitPtrType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtrType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtrTypeContext ptrType() {
		PtrTypeContext _localctx = new PtrTypeContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_ptrType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; Match(Pointer);
			State = 190; Match(LBrace);
			State = 191; customType();
			State = 192; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomTypeContext : ParserRuleContext {
		public QualidentContext qualident() {
			return GetRuleContext<QualidentContext>(0);
		}
		public CustomTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterCustomType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitCustomType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomTypeContext customType() {
		CustomTypeContext _localctx = new CustomTypeContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_customType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; qualident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarTypeContext : ParserRuleContext {
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public CustomTypeContext customType() {
			return GetRuleContext<CustomTypeContext>(0);
		}
		public PtrTypeContext ptrType() {
			return GetRuleContext<PtrTypeContext>(0);
		}
		public ScalarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterScalarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitScalarType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarTypeContext scalarType() {
		ScalarTypeContext _localctx = new ScalarTypeContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_scalarType);
		try {
			State = 199;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SimpleType:
				EnterOuterAlt(_localctx, 1);
				{
				State = 196; simpleType();
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 197; customType();
				}
				break;
			case Pointer:
				EnterOuterAlt(_localctx, 3);
				{
				State = 198; ptrType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public ITerminalNode SimpleType() { return GetToken(SLangGrammarParser.SimpleType, 0); }
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_simpleType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(SimpleType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public ITerminalNode Array() { return GetToken(SLangGrammarParser.Array, 0); }
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public ArrayDimentionContext[] arrayDimention() {
			return GetRuleContexts<ArrayDimentionContext>();
		}
		public ArrayDimentionContext arrayDimention(int i) {
			return GetRuleContext<ArrayDimentionContext>(i);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_arrayType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(Array);
			State = 205;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 204; arrayDimention();
				}
				}
				State = 207;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LSBrace );
			State = 209; scalarType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDimentionContext : ParserRuleContext {
		public ITerminalNode LSBrace() { return GetToken(SLangGrammarParser.LSBrace, 0); }
		public ITerminalNode RSBrace() { return GetToken(SLangGrammarParser.RSBrace, 0); }
		public ArrayDimentionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDimention; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterArrayDimention(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitArrayDimention(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDimention(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDimentionContext arrayDimention() {
		ArrayDimentionContext _localctx = new ArrayDimentionContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_arrayDimention);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; Match(LSBrace);
			State = 212; Match(RSBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLangGrammarParser.AccessModifier, 0); }
		public ITerminalNode Class() { return GetToken(SLangGrammarParser.Class, 0); }
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ITerminalNode End() { return GetToken(SLangGrammarParser.End, 0); }
		public ITerminalNode Base() { return GetToken(SLangGrammarParser.Base, 0); }
		public TypeInheritContext typeInherit() {
			return GetRuleContext<TypeInheritContext>(0);
		}
		public TypeFieldDeclContext[] typeFieldDecl() {
			return GetRuleContexts<TypeFieldDeclContext>();
		}
		public TypeFieldDeclContext typeFieldDecl(int i) {
			return GetRuleContext<TypeFieldDeclContext>(i);
		}
		public TypeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterTypeDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitTypeDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclContext typeDecl() {
		TypeDeclContext _localctx = new TypeDeclContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_typeDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(AccessModifier);
			State = 216;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Base) {
				{
				State = 215; Match(Base);
				}
			}

			State = 218; Match(Class);
			State = 219; Match(Id);
			State = 221;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Inherit) {
				{
				State = 220; typeInherit();
				}
			}

			State = 226;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AccessModifier) {
				{
				{
				State = 223; typeFieldDecl();
				}
				}
				State = 228;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 229; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInheritContext : ParserRuleContext {
		public ITerminalNode Inherit() { return GetToken(SLangGrammarParser.Inherit, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public CustomTypeContext customType() {
			return GetRuleContext<CustomTypeContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public TypeInheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInherit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterTypeInherit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitTypeInherit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInherit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInheritContext typeInherit() {
		TypeInheritContext _localctx = new TypeInheritContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_typeInherit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(Inherit);
			State = 232; Match(LBrace);
			State = 233; customType();
			State = 234; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeFieldDeclContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLangGrammarParser.AccessModifier, 0); }
		public VariableDeclContext variableDecl() {
			return GetRuleContext<VariableDeclContext>(0);
		}
		public ITerminalNode Semicolon() { return GetToken(SLangGrammarParser.Semicolon, 0); }
		public TypeFieldDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeFieldDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterTypeFieldDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitTypeFieldDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeFieldDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeFieldDeclContext typeFieldDecl() {
		TypeFieldDeclContext _localctx = new TypeFieldDeclContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_typeFieldDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; Match(AccessModifier);
			State = 237; variableDecl();
			State = 238; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLangGrammarParser.AccessModifier, 0); }
		public ITerminalNode Function() { return GetToken(SLangGrammarParser.Function, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public RoutineArgListContext routineArgList() {
			return GetRuleContext<RoutineArgListContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public ITerminalNode Colon() { return GetToken(SLangGrammarParser.Colon, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLangGrammarParser.End, 0); }
		public ImportHeadContext importHead() {
			return GetRuleContext<ImportHeadContext>(0);
		}
		public ThisHeaderContext thisHeader() {
			return GetRuleContext<ThisHeaderContext>(0);
		}
		public ITerminalNode Abstract() { return GetToken(SLangGrammarParser.Abstract, 0); }
		public ITerminalNode Override() { return GetToken(SLangGrammarParser.Override, 0); }
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LSBrace) {
				{
				State = 240; importHead();
				}
			}

			State = 243; Match(AccessModifier);
			State = 245;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Abstract || _la==Override) {
				{
				State = 244;
				_la = _input.La(1);
				if ( !(_la==Abstract || _la==Override) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 248;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBrace) {
				{
				State = 247; thisHeader();
				}
			}

			State = 250; Match(Function);
			State = 251; Match(LBrace);
			State = 252; routineArgList();
			State = 253; Match(RBrace);
			State = 254; Match(Colon);
			State = 255; typeName();
			State = 256; Match(Id);
			State = 257; statementSeq();
			State = 258; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThisHeaderContext : ParserRuleContext {
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public CustomTypeContext customType() {
			return GetRuleContext<CustomTypeContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public ThisHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thisHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterThisHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitThisHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThisHeaderContext thisHeader() {
		ThisHeaderContext _localctx = new ThisHeaderContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_thisHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; Match(LBrace);
			State = 261; customType();
			State = 262; Match(Id);
			State = 263; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineArgListContext : ParserRuleContext {
		public RoutineArgContext[] routineArg() {
			return GetRuleContexts<RoutineArgContext>();
		}
		public RoutineArgContext routineArg(int i) {
			return GetRuleContext<RoutineArgContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SLangGrammarParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SLangGrammarParser.Comma, i);
		}
		public RoutineArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterRoutineArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitRoutineArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineArgListContext routineArgList() {
		RoutineArgListContext _localctx = new RoutineArgListContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_routineArgList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FunctionArgModifier:
				{
				State = 265; routineArg();
				State = 270;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==Comma) {
					{
					{
					State = 266; Match(Comma);
					State = 267; routineArg();
					}
					}
					State = 272;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case RBrace:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineArgContext : ParserRuleContext {
		public ITerminalNode FunctionArgModifier() { return GetToken(SLangGrammarParser.FunctionArgModifier, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public RoutineArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterRoutineArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitRoutineArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineArgContext routineArg() {
		RoutineArgContext _localctx = new RoutineArgContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_routineArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; Match(FunctionArgModifier);
			State = 277; typeName();
			State = 278; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDeclContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLangGrammarParser.AccessModifier, 0); }
		public ITerminalNode Procedure() { return GetToken(SLangGrammarParser.Procedure, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public RoutineArgListContext routineArgList() {
			return GetRuleContext<RoutineArgListContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLangGrammarParser.End, 0); }
		public ImportHeadContext importHead() {
			return GetRuleContext<ImportHeadContext>(0);
		}
		public ThisHeaderContext thisHeader() {
			return GetRuleContext<ThisHeaderContext>(0);
		}
		public ITerminalNode Abstract() { return GetToken(SLangGrammarParser.Abstract, 0); }
		public ITerminalNode Override() { return GetToken(SLangGrammarParser.Override, 0); }
		public ProcedureDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterProcedureDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitProcedureDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDeclContext procedureDecl() {
		ProcedureDeclContext _localctx = new ProcedureDeclContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_procedureDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LSBrace) {
				{
				State = 280; importHead();
				}
			}

			State = 283; Match(AccessModifier);
			State = 285;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Abstract || _la==Override) {
				{
				State = 284;
				_la = _input.La(1);
				if ( !(_la==Abstract || _la==Override) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 288;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBrace) {
				{
				State = 287; thisHeader();
				}
			}

			State = 290; Match(Procedure);
			State = 291; Match(LBrace);
			State = 292; routineArgList();
			State = 293; Match(RBrace);
			State = 294; Match(Id);
			State = 295; statementSeq();
			State = 296; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportHeadContext : ParserRuleContext {
		public ITerminalNode LSBrace() { return GetToken(SLangGrammarParser.LSBrace, 0); }
		public ITerminalNode File() { return GetToken(SLangGrammarParser.File, 0); }
		public ITerminalNode[] StringLiteral() { return GetTokens(SLangGrammarParser.StringLiteral); }
		public ITerminalNode StringLiteral(int i) {
			return GetToken(SLangGrammarParser.StringLiteral, i);
		}
		public ITerminalNode Import() { return GetToken(SLangGrammarParser.Import, 0); }
		public ITerminalNode RSBrace() { return GetToken(SLangGrammarParser.RSBrace, 0); }
		public ImportHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importHead; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterImportHead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitImportHead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportHeadContext importHead() {
		ImportHeadContext _localctx = new ImportHeadContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_importHead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; Match(LSBrace);
			State = 299; Match(File);
			State = 300; Match(StringLiteral);
			State = 301; Match(Import);
			State = 302; Match(StringLiteral);
			State = 303; Match(RSBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementSeqContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSeq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterStatementSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitStatementSeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementSeqContext statementSeq() {
		StatementSeqContext _localctx = new StatementSeqContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_statementSeq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 305; statement();
					}
					} 
				}
				State = 310;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public ComplexStatementContext complexStatement() {
			return GetRuleContext<ComplexStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_statement);
		try {
			State = 313;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Variable:
			case Const:
			case Let:
			case Return:
			case Input:
			case Output:
			case Call:
			case Pointer:
			case Array:
				EnterOuterAlt(_localctx, 1);
				{
				State = 311; simpleStatement();
				}
				break;
			case If:
			case While:
			case Repeat:
				EnterOuterAlt(_localctx, 2);
				{
				State = 312; complexStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		public ITerminalNode Semicolon() { return GetToken(SLangGrammarParser.Semicolon, 0); }
		public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public OutputContext output() {
			return GetRuleContext<OutputContext>(0);
		}
		public ReturnCContext returnC() {
			return GetRuleContext<ReturnCContext>(0);
		}
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_simpleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Variable:
			case Const:
			case Pointer:
			case Array:
				{
				State = 315; declare();
				}
				break;
			case Let:
				{
				State = 316; let();
				}
				break;
			case Input:
				{
				State = 317; input();
				}
				break;
			case Output:
				{
				State = 318; output();
				}
				break;
			case Return:
				{
				State = 319; returnC();
				}
				break;
			case Call:
				{
				State = 320; call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 323; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexStatementContext : ParserRuleContext {
		public IfCContext ifC() {
			return GetRuleContext<IfCContext>(0);
		}
		public WhileCContext whileC() {
			return GetRuleContext<WhileCContext>(0);
		}
		public RepeatCContext repeatC() {
			return GetRuleContext<RepeatCContext>(0);
		}
		public ComplexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterComplexStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitComplexStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexStatementContext complexStatement() {
		ComplexStatementContext _localctx = new ComplexStatementContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_complexStatement);
		try {
			State = 328;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 325; ifC();
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 2);
				{
				State = 326; whileC();
				}
				break;
			case Repeat:
				EnterOuterAlt(_localctx, 3);
				{
				State = 327; repeatC();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		public ITerminalNode Let() { return GetToken(SLangGrammarParser.Let, 0); }
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(SLangGrammarParser.Assign, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterLet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitLet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(Let);
			State = 331; designator();
			State = 332; Match(Assign);
			State = 333; exp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public ITerminalNode Input() { return GetToken(SLangGrammarParser.Input, 0); }
		public DesignatorContext[] designator() {
			return GetRuleContexts<DesignatorContext>();
		}
		public DesignatorContext designator(int i) {
			return GetRuleContext<DesignatorContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SLangGrammarParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SLangGrammarParser.Comma, i);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; Match(Input);
			State = 336; designator();
			State = 341;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Comma) {
				{
				{
				State = 337; Match(Comma);
				State = 338; designator();
				}
				}
				State = 343;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		public ITerminalNode Output() { return GetToken(SLangGrammarParser.Output, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SLangGrammarParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SLangGrammarParser.Comma, i);
		}
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_output);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(Output);
			State = 345; exp();
			State = 350;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Comma) {
				{
				{
				State = 346; Match(Comma);
				State = 347; exp();
				}
				}
				State = 352;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnCContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(SLangGrammarParser.Return, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ReturnCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnC; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterReturnC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitReturnC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnCContext returnC() {
		ReturnCContext _localctx = new ReturnCContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_returnC);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; Match(Return);
			State = 355;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AddOp) | (1L << SubOp) | (1L << BoolNot) | (1L << LBrace) | (1L << New) | (1L << Nil) | (1L << IntValue) | (1L << RealValue) | (1L << BoolValue) | (1L << Id) | (1L << StringLiteral) | (1L << SingleCharacter))) != 0)) {
				{
				State = 354; exp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public ITerminalNode Call() { return GetToken(SLangGrammarParser.Call, 0); }
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; Match(Call);
			State = 358; designator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfCContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(SLangGrammarParser.If, 0); }
		public ITerminalNode[] LBrace() { return GetTokens(SLangGrammarParser.LBrace); }
		public ITerminalNode LBrace(int i) {
			return GetToken(SLangGrammarParser.LBrace, i);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] RBrace() { return GetTokens(SLangGrammarParser.RBrace); }
		public ITerminalNode RBrace(int i) {
			return GetToken(SLangGrammarParser.RBrace, i);
		}
		public ITerminalNode[] Then() { return GetTokens(SLangGrammarParser.Then); }
		public ITerminalNode Then(int i) {
			return GetToken(SLangGrammarParser.Then, i);
		}
		public StatementSeqContext[] statementSeq() {
			return GetRuleContexts<StatementSeqContext>();
		}
		public StatementSeqContext statementSeq(int i) {
			return GetRuleContext<StatementSeqContext>(i);
		}
		public ITerminalNode End() { return GetToken(SLangGrammarParser.End, 0); }
		public ITerminalNode[] Elseif() { return GetTokens(SLangGrammarParser.Elseif); }
		public ITerminalNode Elseif(int i) {
			return GetToken(SLangGrammarParser.Elseif, i);
		}
		public ITerminalNode Else() { return GetToken(SLangGrammarParser.Else, 0); }
		public IfCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifC; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterIfC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitIfC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfCContext ifC() {
		IfCContext _localctx = new IfCContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_ifC);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; Match(If);
			State = 361; Match(LBrace);
			State = 362; exp();
			State = 363; Match(RBrace);
			State = 364; Match(Then);
			State = 365; statementSeq();
			State = 375;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Elseif) {
				{
				{
				State = 366; Match(Elseif);
				State = 367; Match(LBrace);
				State = 368; exp();
				State = 369; Match(RBrace);
				State = 370; Match(Then);
				State = 371; statementSeq();
				}
				}
				State = 377;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 380;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Else) {
				{
				State = 378; Match(Else);
				State = 379; statementSeq();
				}
			}

			State = 382; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileCContext : ParserRuleContext {
		public ITerminalNode While() { return GetToken(SLangGrammarParser.While, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public ITerminalNode Do() { return GetToken(SLangGrammarParser.Do, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLangGrammarParser.End, 0); }
		public WhileCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileC; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterWhileC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitWhileC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileCContext whileC() {
		WhileCContext _localctx = new WhileCContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_whileC);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; Match(While);
			State = 385; Match(LBrace);
			State = 386; exp();
			State = 387; Match(RBrace);
			State = 388; Match(Do);
			State = 389; statementSeq();
			State = 390; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatCContext : ParserRuleContext {
		public ITerminalNode Repeat() { return GetToken(SLangGrammarParser.Repeat, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode While() { return GetToken(SLangGrammarParser.While, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public RepeatCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatC; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterRepeatC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitRepeatC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatCContext repeatC() {
		RepeatCContext _localctx = new RepeatCContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_repeatC);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392; Match(Repeat);
			State = 393; statementSeq();
			State = 394; Match(While);
			State = 395; Match(LBrace);
			State = 396; exp();
			State = 397; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SLangGrammarParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SLangGrammarParser.Comma, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case AddOp:
			case SubOp:
			case BoolNot:
			case LBrace:
			case New:
			case Nil:
			case IntValue:
			case RealValue:
			case BoolValue:
			case Id:
			case StringLiteral:
			case SingleCharacter:
				{
				State = 399; exp();
				State = 404;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==Comma) {
					{
					{
					State = 400; Match(Comma);
					State = 401; exp();
					}
					}
					State = 406;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case RBrace:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode BoolEq() { return GetToken(SLangGrammarParser.BoolEq, 0); }
		public ITerminalNode BoolNeq() { return GetToken(SLangGrammarParser.BoolNeq, 0); }
		public ITerminalNode BoolG() { return GetToken(SLangGrammarParser.BoolG, 0); }
		public ITerminalNode BoolL() { return GetToken(SLangGrammarParser.BoolL, 0); }
		public ITerminalNode BoolLeq() { return GetToken(SLangGrammarParser.BoolLeq, 0); }
		public ITerminalNode BoolGeq() { return GetToken(SLangGrammarParser.BoolGeq, 0); }
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		ExpContext _localctx = new ExpContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_exp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410; simpleExpr();
			State = 413;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BoolEq) | (1L << BoolNeq) | (1L << BoolG) | (1L << BoolL) | (1L << BoolGeq) | (1L << BoolLeq))) != 0)) {
				{
				State = 411;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BoolEq) | (1L << BoolNeq) | (1L << BoolG) | (1L << BoolL) | (1L << BoolGeq) | (1L << BoolLeq))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 412; exp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExprContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public ITerminalNode AddOp() { return GetToken(SLangGrammarParser.AddOp, 0); }
		public ITerminalNode SubOp() { return GetToken(SLangGrammarParser.SubOp, 0); }
		public ITerminalNode BoolOr() { return GetToken(SLangGrammarParser.BoolOr, 0); }
		public SimpleExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterSimpleExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitSimpleExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExprContext simpleExpr() {
		SimpleExprContext _localctx = new SimpleExprContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_simpleExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415; term();
			State = 418;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AddOp) | (1L << SubOp) | (1L << BoolOr))) != 0)) {
				{
				State = 416;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AddOp) | (1L << SubOp) | (1L << BoolOr))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 417; simpleExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public SignedFactorContext signedFactor() {
			return GetRuleContext<SignedFactorContext>(0);
		}
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode MulOp() { return GetToken(SLangGrammarParser.MulOp, 0); }
		public ITerminalNode DivOp() { return GetToken(SLangGrammarParser.DivOp, 0); }
		public ITerminalNode BoolAnd() { return GetToken(SLangGrammarParser.BoolAnd, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; signedFactor();
			State = 423;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MulOp) | (1L << DivOp) | (1L << BoolAnd))) != 0)) {
				{
				State = 421;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MulOp) | (1L << DivOp) | (1L << BoolAnd))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 422; term();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedFactorContext : ParserRuleContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode AddOp() { return GetToken(SLangGrammarParser.AddOp, 0); }
		public ITerminalNode SubOp() { return GetToken(SLangGrammarParser.SubOp, 0); }
		public SignedFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedFactor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterSignedFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitSignedFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedFactorContext signedFactor() {
		SignedFactorContext _localctx = new SignedFactorContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_signedFactor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AddOp || _la==SubOp) {
				{
				State = 425;
				_la = _input.La(1);
				if ( !(_la==AddOp || _la==SubOp) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 428; factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode IntValue() { return GetToken(SLangGrammarParser.IntValue, 0); }
		public ITerminalNode RealValue() { return GetToken(SLangGrammarParser.RealValue, 0); }
		public ITerminalNode BoolValue() { return GetToken(SLangGrammarParser.BoolValue, 0); }
		public ITerminalNode StringLiteral() { return GetToken(SLangGrammarParser.StringLiteral, 0); }
		public ITerminalNode SingleCharacter() { return GetToken(SLangGrammarParser.SingleCharacter, 0); }
		public ITerminalNode Nil() { return GetToken(SLangGrammarParser.Nil, 0); }
		public ITerminalNode BoolNot() { return GetToken(SLangGrammarParser.BoolNot, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public NewCContext newC() {
			return GetRuleContext<NewCContext>(0);
		}
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_factor);
		int _la;
		try {
			State = 439;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				State = 430; designator();
				}
				break;
			case Nil:
			case IntValue:
			case RealValue:
			case BoolValue:
			case StringLiteral:
			case SingleCharacter:
				EnterOuterAlt(_localctx, 2);
				{
				State = 431;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Nil) | (1L << IntValue) | (1L << RealValue) | (1L << BoolValue) | (1L << StringLiteral) | (1L << SingleCharacter))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case BoolNot:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 432; Match(BoolNot);
				State = 433; factor();
				}
				}
				break;
			case New:
				EnterOuterAlt(_localctx, 4);
				{
				State = 434; newC();
				}
				break;
			case LBrace:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 435; Match(LBrace);
				State = 436; exp();
				State = 437; Match(RBrace);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewCContext : ParserRuleContext {
		public ITerminalNode New() { return GetToken(SLangGrammarParser.New, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public CustomTypeContext customType() {
			return GetRuleContext<CustomTypeContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public NewCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newC; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterNewC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitNewC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewCContext newC() {
		NewCContext _localctx = new NewCContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_newC);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441; Match(New);
			State = 442; Match(LBrace);
			State = 443; customType();
			State = 444; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public DesignatorStatementContext[] designatorStatement() {
			return GetRuleContexts<DesignatorStatementContext>();
		}
		public DesignatorStatementContext designatorStatement(int i) {
			return GetRuleContext<DesignatorStatementContext>(i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446; Match(Id);
			State = 450;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Point) | (1L << LBrace) | (1L << LSBrace))) != 0)) {
				{
				{
				State = 447; designatorStatement();
				}
				}
				State = 452;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorStatementContext : ParserRuleContext {
		public ITerminalNode Point() { return GetToken(SLangGrammarParser.Point, 0); }
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ITerminalNode LSBrace() { return GetToken(SLangGrammarParser.LSBrace, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode RSBrace() { return GetToken(SLangGrammarParser.RSBrace, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public DesignatorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designatorStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterDesignatorStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitDesignatorStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorStatementContext designatorStatement() {
		DesignatorStatementContext _localctx = new DesignatorStatementContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_designatorStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Point:
				{
				State = 453; Match(Point);
				State = 454; Match(Id);
				}
				break;
			case LSBrace:
				{
				State = 455; Match(LSBrace);
				State = 456; exp();
				State = 457; Match(RSBrace);
				}
				break;
			case LBrace:
				{
				State = 459; Match(LBrace);
				State = 460; exprList();
				State = 461; Match(RBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualidentContext : ParserRuleContext {
		public ITerminalNode[] Id() { return GetTokens(SLangGrammarParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(SLangGrammarParser.Id, i);
		}
		public ITerminalNode Point() { return GetToken(SLangGrammarParser.Point, 0); }
		public QualidentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualident; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterQualident(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitQualident(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualident(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualidentContext qualident() {
		QualidentContext _localctx = new QualidentContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_qualident);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 465; Match(Id);
				State = 466; Match(Point);
				}
				break;
			}
			State = 469; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x43\x1DA\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x3\x2\a\x2j\n\x2\f\x2\xE\x2m\v\x2\x3"+
		"\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4x\n\x4\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x82\n\x6\f\x6\xE\x6\x85"+
		"\v\x6\x3\a\x3\a\x5\a\x89\n\a\x3\b\x3\b\x3\b\x5\b\x8E\n\b\x3\b\x3\b\x5"+
		"\b\x92\n\b\x3\t\x3\t\x3\t\x5\t\x97\n\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x6\v\xA3\n\v\r\v\xE\v\xA4\x3\v\x3\v\x3\f\x3\f\x3\f\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x5\xE\xB4\n\xE\x3\xE\x3\xE\x5"+
		"\xE\xB8\n\xE\x3\xE\x3\xE\x3\xF\x3\xF\x5\xF\xBE\n\xF\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x5\x12\xCA\n\x12\x3"+
		"\x13\x3\x13\x3\x14\x3\x14\x6\x14\xD0\n\x14\r\x14\xE\x14\xD1\x3\x14\x3"+
		"\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x5\x16\xDB\n\x16\x3\x16\x3\x16"+
		"\x3\x16\x5\x16\xE0\n\x16\x3\x16\a\x16\xE3\n\x16\f\x16\xE\x16\xE6\v\x16"+
		"\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x19\x5\x19\xF4\n\x19\x3\x19\x3\x19\x5\x19\xF8\n\x19\x3\x19"+
		"\x5\x19\xFB\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3"+
		"\x1B\a\x1B\x10F\n\x1B\f\x1B\xE\x1B\x112\v\x1B\x3\x1B\x5\x1B\x115\n\x1B"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x5\x1D\x11C\n\x1D\x3\x1D\x3\x1D\x5"+
		"\x1D\x120\n\x1D\x3\x1D\x5\x1D\x123\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1F\a\x1F\x135\n\x1F\f\x1F\xE\x1F\x138\v\x1F\x3 \x3 \x5 \x13C"+
		"\n \x3!\x3!\x3!\x3!\x3!\x3!\x5!\x144\n!\x3!\x3!\x3\"\x3\"\x3\"\x5\"\x14B"+
		"\n\"\x3#\x3#\x3#\x3#\x3#\x3$\x3$\x3$\x3$\a$\x156\n$\f$\xE$\x159\v$\x3"+
		"%\x3%\x3%\x3%\a%\x15F\n%\f%\xE%\x162\v%\x3&\x3&\x5&\x166\n&\x3\'\x3\'"+
		"\x3\'\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\a(\x178\n(\f"+
		"(\xE(\x17B\v(\x3(\x3(\x5(\x17F\n(\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3)\x3)"+
		"\x3)\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3+\x3+\x3+\a+\x195\n+\f+\xE+\x198\v"+
		"+\x3+\x5+\x19B\n+\x3,\x3,\x3,\x5,\x1A0\n,\x3-\x3-\x3-\x5-\x1A5\n-\x3."+
		"\x3.\x3.\x5.\x1AA\n.\x3/\x5/\x1AD\n/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30"+
		"\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x1BA\n\x30\x3\x31\x3\x31\x3"+
		"\x31\x3\x31\x3\x31\x3\x32\x3\x32\a\x32\x1C3\n\x32\f\x32\xE\x32\x1C6\v"+
		"\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3"+
		"\x33\x5\x33\x1D2\n\x33\x3\x34\x3\x34\x5\x34\x1D6\n\x34\x3\x34\x3\x34\x3"+
		"\x34\x2\x2\x2\x35\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2"+
		"\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2"+
		".\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2"+
		"\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64"+
		"\x2\x66\x2\x2\b\x3\x2\x39:\x3\x2\v\x10\x4\x2\x4\x5\t\t\x4\x2\x6\a\n\n"+
		"\x3\x2\x4\x5\x5\x2\x31\x31<>@\x41\x1DF\x2k\x3\x2\x2\x2\x4p\x3\x2\x2\x2"+
		"\x6s\x3\x2\x2\x2\by\x3\x2\x2\x2\n\x83\x3\x2\x2\x2\f\x88\x3\x2\x2\x2\xE"+
		"\x8D\x3\x2\x2\x2\x10\x93\x3\x2\x2\x2\x12\x9A\x3\x2\x2\x2\x14\x9D\x3\x2"+
		"\x2\x2\x16\xA8\x3\x2\x2\x2\x18\xAB\x3\x2\x2\x2\x1A\xB1\x3\x2\x2\x2\x1C"+
		"\xBD\x3\x2\x2\x2\x1E\xBF\x3\x2\x2\x2 \xC4\x3\x2\x2\x2\"\xC9\x3\x2\x2\x2"+
		"$\xCB\x3\x2\x2\x2&\xCD\x3\x2\x2\x2(\xD5\x3\x2\x2\x2*\xD8\x3\x2\x2\x2,"+
		"\xE9\x3\x2\x2\x2.\xEE\x3\x2\x2\x2\x30\xF3\x3\x2\x2\x2\x32\x106\x3\x2\x2"+
		"\x2\x34\x114\x3\x2\x2\x2\x36\x116\x3\x2\x2\x2\x38\x11B\x3\x2\x2\x2:\x12C"+
		"\x3\x2\x2\x2<\x136\x3\x2\x2\x2>\x13B\x3\x2\x2\x2@\x143\x3\x2\x2\x2\x42"+
		"\x14A\x3\x2\x2\x2\x44\x14C\x3\x2\x2\x2\x46\x151\x3\x2\x2\x2H\x15A\x3\x2"+
		"\x2\x2J\x163\x3\x2\x2\x2L\x167\x3\x2\x2\x2N\x16A\x3\x2\x2\x2P\x182\x3"+
		"\x2\x2\x2R\x18A\x3\x2\x2\x2T\x19A\x3\x2\x2\x2V\x19C\x3\x2\x2\x2X\x1A1"+
		"\x3\x2\x2\x2Z\x1A6\x3\x2\x2\x2\\\x1AC\x3\x2\x2\x2^\x1B9\x3\x2\x2\x2`\x1BB"+
		"\x3\x2\x2\x2\x62\x1C0\x3\x2\x2\x2\x64\x1D1\x3\x2\x2\x2\x66\x1D5\x3\x2"+
		"\x2\x2hj\x5\x4\x3\x2ih\x3\x2\x2\x2jm\x3\x2\x2\x2ki\x3\x2\x2\x2kl\x3\x2"+
		"\x2\x2ln\x3\x2\x2\x2mk\x3\x2\x2\x2no\x5\x6\x4\x2o\x3\x3\x2\x2\x2pq\a&"+
		"\x2\x2qr\a?\x2\x2r\x5\x3\x2\x2\x2st\a%\x2\x2tu\a?\x2\x2uw\x5\n\x6\x2v"+
		"x\x5\b\x5\x2wv\x3\x2\x2\x2wx\x3\x2\x2\x2x\a\x3\x2\x2\x2yz\a\'\x2\x2z{"+
		"\x5<\x1F\x2{|\a(\x2\x2|\t\x3\x2\x2\x2}\x82\x5\x30\x19\x2~\x82\x5\x38\x1D"+
		"\x2\x7F\x82\x5*\x16\x2\x80\x82\x5\x1A\xE\x2\x81}\x3\x2\x2\x2\x81~\x3\x2"+
		"\x2\x2\x81\x7F\x3\x2\x2\x2\x81\x80\x3\x2\x2\x2\x82\x85\x3\x2\x2\x2\x83"+
		"\x81\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\v\x3\x2\x2\x2\x85\x83\x3\x2\x2"+
		"\x2\x86\x89\x5\xE\b\x2\x87\x89\x5\x18\r\x2\x88\x86\x3\x2\x2\x2\x88\x87"+
		"\x3\x2\x2\x2\x89\r\x3\x2\x2\x2\x8A\x8E\x5\x10\t\x2\x8B\x8E\x5\x12\n\x2"+
		"\x8C\x8E\x5\x16\f\x2\x8D\x8A\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8D\x8C\x3"+
		"\x2\x2\x2\x8E\x91\x3\x2\x2\x2\x8F\x90\a/\x2\x2\x90\x92\x5V,\x2\x91\x8F"+
		"\x3\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\xF\x3\x2\x2\x2\x93\x96\a\x16\x2\x2"+
		"\x94\x97\x5$\x13\x2\x95\x97\x5 \x11\x2\x96\x94\x3\x2\x2\x2\x96\x95\x3"+
		"\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\x99\a?\x2\x2\x99\x11\x3\x2\x2\x2\x9A"+
		"\x9B\x5\x14\v\x2\x9B\x9C\a?\x2\x2\x9C\x13\x3\x2\x2\x2\x9D\xA2\a\x33\x2"+
		"\x2\x9E\x9F\a-\x2\x2\x9F\xA0\x5V,\x2\xA0\xA1\a.\x2\x2\xA1\xA3\x3\x2\x2"+
		"\x2\xA2\x9E\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA2\x3\x2\x2\x2\xA4\xA5"+
		"\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA7\x5\"\x12\x2\xA7\x15\x3\x2\x2"+
		"\x2\xA8\xA9\x5\x1E\x10\x2\xA9\xAA\a?\x2\x2\xAA\x17\x3\x2\x2\x2\xAB\xAC"+
		"\a\x17\x2\x2\xAC\xAD\x5\"\x12\x2\xAD\xAE\a?\x2\x2\xAE\xAF\a/\x2\x2\xAF"+
		"\xB0\x5V,\x2\xB0\x19\x3\x2\x2\x2\xB1\xB7\a\x35\x2\x2\xB2\xB4\a\x1D\x2"+
		"\x2\xB3\xB2\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB8"+
		"\x5\xE\b\x2\xB6\xB8\x5\x18\r\x2\xB7\xB3\x3\x2\x2\x2\xB7\xB6\x3\x2\x2\x2"+
		"\xB8\xB9\x3\x2\x2\x2\xB9\xBA\a\x13\x2\x2\xBA\x1B\x3\x2\x2\x2\xBB\xBE\x5"+
		"\"\x12\x2\xBC\xBE\x5&\x14\x2\xBD\xBB\x3\x2\x2\x2\xBD\xBC\x3\x2\x2\x2\xBE"+
		"\x1D\x3\x2\x2\x2\xBF\xC0\a\x32\x2\x2\xC0\xC1\a+\x2\x2\xC1\xC2\x5 \x11"+
		"\x2\xC2\xC3\a,\x2\x2\xC3\x1F\x3\x2\x2\x2\xC4\xC5\x5\x66\x34\x2\xC5!\x3"+
		"\x2\x2\x2\xC6\xCA\x5$\x13\x2\xC7\xCA\x5 \x11\x2\xC8\xCA\x5\x1E\x10\x2"+
		"\xC9\xC6\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xC9\xC8\x3\x2\x2\x2\xCA#\x3\x2"+
		"\x2\x2\xCB\xCC\a\x3\x2\x2\xCC%\x3\x2\x2\x2\xCD\xCF\a\x33\x2\x2\xCE\xD0"+
		"\x5(\x15\x2\xCF\xCE\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xCF\x3\x2\x2\x2"+
		"\xD1\xD2\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD4\x5\"\x12\x2\xD4\'\x3"+
		"\x2\x2\x2\xD5\xD6\a-\x2\x2\xD6\xD7\a.\x2\x2\xD7)\x3\x2\x2\x2\xD8\xDA\a"+
		"\x35\x2\x2\xD9\xDB\a\x38\x2\x2\xDA\xD9\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2"+
		"\xDB\xDC\x3\x2\x2\x2\xDC\xDD\a\x36\x2\x2\xDD\xDF\a?\x2\x2\xDE\xE0\x5,"+
		"\x17\x2\xDF\xDE\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE4\x3\x2\x2\x2\xE1"+
		"\xE3\x5.\x18\x2\xE2\xE1\x3\x2\x2\x2\xE3\xE6\x3\x2\x2\x2\xE4\xE2\x3\x2"+
		"\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE7\x3\x2\x2\x2\xE6\xE4\x3\x2\x2\x2\xE7"+
		"\xE8\a(\x2\x2\xE8+\x3\x2\x2\x2\xE9\xEA\a\x37\x2\x2\xEA\xEB\a+\x2\x2\xEB"+
		"\xEC\x5 \x11\x2\xEC\xED\a,\x2\x2\xED-\x3\x2\x2\x2\xEE\xEF\a\x35\x2\x2"+
		"\xEF\xF0\x5\xE\b\x2\xF0\xF1\a\x13\x2\x2\xF1/\x3\x2\x2\x2\xF2\xF4\x5:\x1E"+
		"\x2\xF3\xF2\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF7"+
		"\a\x35\x2\x2\xF6\xF8\t\x2\x2\x2\xF7\xF6\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2"+
		"\xF8\xFA\x3\x2\x2\x2\xF9\xFB\x5\x32\x1A\x2\xFA\xF9\x3\x2\x2\x2\xFA\xFB"+
		"\x3\x2\x2\x2\xFB\xFC\x3\x2\x2\x2\xFC\xFD\a)\x2\x2\xFD\xFE\a+\x2\x2\xFE"+
		"\xFF\x5\x34\x1B\x2\xFF\x100\a,\x2\x2\x100\x101\a\x12\x2\x2\x101\x102\x5"+
		"\x1C\xF\x2\x102\x103\a?\x2\x2\x103\x104\x5<\x1F\x2\x104\x105\a(\x2\x2"+
		"\x105\x31\x3\x2\x2\x2\x106\x107\a+\x2\x2\x107\x108\x5 \x11\x2\x108\x109"+
		"\a?\x2\x2\x109\x10A\a,\x2\x2\x10A\x33\x3\x2\x2\x2\x10B\x110\x5\x36\x1C"+
		"\x2\x10C\x10D\a\x14\x2\x2\x10D\x10F\x5\x36\x1C\x2\x10E\x10C\x3\x2\x2\x2"+
		"\x10F\x112\x3\x2\x2\x2\x110\x10E\x3\x2\x2\x2\x110\x111\x3\x2\x2\x2\x111"+
		"\x115\x3\x2\x2\x2\x112\x110\x3\x2\x2\x2\x113\x115\x3\x2\x2\x2\x114\x10B"+
		"\x3\x2\x2\x2\x114\x113\x3\x2\x2\x2\x115\x35\x3\x2\x2\x2\x116\x117\a\x34"+
		"\x2\x2\x117\x118\x5\x1C\xF\x2\x118\x119\a?\x2\x2\x119\x37\x3\x2\x2\x2"+
		"\x11A\x11C\x5:\x1E\x2\x11B\x11A\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C"+
		"\x11D\x3\x2\x2\x2\x11D\x11F\a\x35\x2\x2\x11E\x120\t\x2\x2\x2\x11F\x11E"+
		"\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x120\x122\x3\x2\x2\x2\x121\x123\x5"+
		"\x32\x1A\x2\x122\x121\x3\x2\x2\x2\x122\x123\x3\x2\x2\x2\x123\x124\x3\x2"+
		"\x2\x2\x124\x125\a*\x2\x2\x125\x126\a+\x2\x2\x126\x127\x5\x34\x1B\x2\x127"+
		"\x128\a,\x2\x2\x128\x129\a?\x2\x2\x129\x12A\x5<\x1F\x2\x12A\x12B\a(\x2"+
		"\x2\x12B\x39\x3\x2\x2\x2\x12C\x12D\a-\x2\x2\x12D\x12E\a;\x2\x2\x12E\x12F"+
		"\a@\x2\x2\x12F\x130\a&\x2\x2\x130\x131\a@\x2\x2\x131\x132\a.\x2\x2\x132"+
		";\x3\x2\x2\x2\x133\x135\x5> \x2\x134\x133\x3\x2\x2\x2\x135\x138\x3\x2"+
		"\x2\x2\x136\x134\x3\x2\x2\x2\x136\x137\x3\x2\x2\x2\x137=\x3\x2\x2\x2\x138"+
		"\x136\x3\x2\x2\x2\x139\x13C\x5@!\x2\x13A\x13C\x5\x42\"\x2\x13B\x139\x3"+
		"\x2\x2\x2\x13B\x13A\x3\x2\x2\x2\x13C?\x3\x2\x2\x2\x13D\x144\x5\f\a\x2"+
		"\x13E\x144\x5\x44#\x2\x13F\x144\x5\x46$\x2\x140\x144\x5H%\x2\x141\x144"+
		"\x5J&\x2\x142\x144\x5L\'\x2\x143\x13D\x3\x2\x2\x2\x143\x13E\x3\x2\x2\x2"+
		"\x143\x13F\x3\x2\x2\x2\x143\x140\x3\x2\x2\x2\x143\x141\x3\x2\x2\x2\x143"+
		"\x142\x3\x2\x2\x2\x144\x145\x3\x2\x2\x2\x145\x146\a\x13\x2\x2\x146\x41"+
		"\x3\x2\x2\x2\x147\x14B\x5N(\x2\x148\x14B\x5P)\x2\x149\x14B\x5R*\x2\x14A"+
		"\x147\x3\x2\x2\x2\x14A\x148\x3\x2\x2\x2\x14A\x149\x3\x2\x2\x2\x14B\x43"+
		"\x3\x2\x2\x2\x14C\x14D\a\x18\x2\x2\x14D\x14E\x5\x62\x32\x2\x14E\x14F\a"+
		"/\x2\x2\x14F\x150\x5V,\x2\x150\x45\x3\x2\x2\x2\x151\x152\a\x1A\x2\x2\x152"+
		"\x157\x5\x62\x32\x2\x153\x154\a\x14\x2\x2\x154\x156\x5\x62\x32\x2\x155"+
		"\x153\x3\x2\x2\x2\x156\x159\x3\x2\x2\x2\x157\x155\x3\x2\x2\x2\x157\x158"+
		"\x3\x2\x2\x2\x158G\x3\x2\x2\x2\x159\x157\x3\x2\x2\x2\x15A\x15B\a\x1B\x2"+
		"\x2\x15B\x160\x5V,\x2\x15C\x15D\a\x14\x2\x2\x15D\x15F\x5V,\x2\x15E\x15C"+
		"\x3\x2\x2\x2\x15F\x162\x3\x2\x2\x2\x160\x15E\x3\x2\x2\x2\x160\x161\x3"+
		"\x2\x2\x2\x161I\x3\x2\x2\x2\x162\x160\x3\x2\x2\x2\x163\x165\a\x19\x2\x2"+
		"\x164\x166\x5V,\x2\x165\x164\x3\x2\x2\x2\x165\x166\x3\x2\x2\x2\x166K\x3"+
		"\x2\x2\x2\x167\x168\a\x1C\x2\x2\x168\x169\x5\x62\x32\x2\x169M\x3\x2\x2"+
		"\x2\x16A\x16B\a\x1E\x2\x2\x16B\x16C\a+\x2\x2\x16C\x16D\x5V,\x2\x16D\x16E"+
		"\a,\x2\x2\x16E\x16F\a\x1F\x2\x2\x16F\x179\x5<\x1F\x2\x170\x171\a#\x2\x2"+
		"\x171\x172\a+\x2\x2\x172\x173\x5V,\x2\x173\x174\a,\x2\x2\x174\x175\a\x1F"+
		"\x2\x2\x175\x176\x5<\x1F\x2\x176\x178\x3\x2\x2\x2\x177\x170\x3\x2\x2\x2"+
		"\x178\x17B\x3\x2\x2\x2\x179\x177\x3\x2\x2\x2\x179\x17A\x3\x2\x2\x2\x17A"+
		"\x17E\x3\x2\x2\x2\x17B\x179\x3\x2\x2\x2\x17C\x17D\a \x2\x2\x17D\x17F\x5"+
		"<\x1F\x2\x17E\x17C\x3\x2\x2\x2\x17E\x17F\x3\x2\x2\x2\x17F\x180\x3\x2\x2"+
		"\x2\x180\x181\a(\x2\x2\x181O\x3\x2\x2\x2\x182\x183\a!\x2\x2\x183\x184"+
		"\a+\x2\x2\x184\x185\x5V,\x2\x185\x186\a,\x2\x2\x186\x187\a$\x2\x2\x187"+
		"\x188\x5<\x1F\x2\x188\x189\a(\x2\x2\x189Q\x3\x2\x2\x2\x18A\x18B\a\"\x2"+
		"\x2\x18B\x18C\x5<\x1F\x2\x18C\x18D\a!\x2\x2\x18D\x18E\a+\x2\x2\x18E\x18F"+
		"\x5V,\x2\x18F\x190\a,\x2\x2\x190S\x3\x2\x2\x2\x191\x196\x5V,\x2\x192\x193"+
		"\a\x14\x2\x2\x193\x195\x5V,\x2\x194\x192\x3\x2\x2\x2\x195\x198\x3\x2\x2"+
		"\x2\x196\x194\x3\x2\x2\x2\x196\x197\x3\x2\x2\x2\x197\x19B\x3\x2\x2\x2"+
		"\x198\x196\x3\x2\x2\x2\x199\x19B\x3\x2\x2\x2\x19A\x191\x3\x2\x2\x2\x19A"+
		"\x199\x3\x2\x2\x2\x19BU\x3\x2\x2\x2\x19C\x19F\x5X-\x2\x19D\x19E\t\x3\x2"+
		"\x2\x19E\x1A0\x5V,\x2\x19F\x19D\x3\x2\x2\x2\x19F\x1A0\x3\x2\x2\x2\x1A0"+
		"W\x3\x2\x2\x2\x1A1\x1A4\x5Z.\x2\x1A2\x1A3\t\x4\x2\x2\x1A3\x1A5\x5X-\x2"+
		"\x1A4\x1A2\x3\x2\x2\x2\x1A4\x1A5\x3\x2\x2\x2\x1A5Y\x3\x2\x2\x2\x1A6\x1A9"+
		"\x5\\/\x2\x1A7\x1A8\t\x5\x2\x2\x1A8\x1AA\x5Z.\x2\x1A9\x1A7\x3\x2\x2\x2"+
		"\x1A9\x1AA\x3\x2\x2\x2\x1AA[\x3\x2\x2\x2\x1AB\x1AD\t\x6\x2\x2\x1AC\x1AB"+
		"\x3\x2\x2\x2\x1AC\x1AD\x3\x2\x2\x2\x1AD\x1AE\x3\x2\x2\x2\x1AE\x1AF\x5"+
		"^\x30\x2\x1AF]\x3\x2\x2\x2\x1B0\x1BA\x5\x62\x32\x2\x1B1\x1BA\t\a\x2\x2"+
		"\x1B2\x1B3\a\x11\x2\x2\x1B3\x1BA\x5^\x30\x2\x1B4\x1BA\x5`\x31\x2\x1B5"+
		"\x1B6\a+\x2\x2\x1B6\x1B7\x5V,\x2\x1B7\x1B8\a,\x2\x2\x1B8\x1BA\x3\x2\x2"+
		"\x2\x1B9\x1B0\x3\x2\x2\x2\x1B9\x1B1\x3\x2\x2\x2\x1B9\x1B2\x3\x2\x2\x2"+
		"\x1B9\x1B4\x3\x2\x2\x2\x1B9\x1B5\x3\x2\x2\x2\x1BA_\x3\x2\x2\x2\x1BB\x1BC"+
		"\a\x30\x2\x2\x1BC\x1BD\a+\x2\x2\x1BD\x1BE\x5 \x11\x2\x1BE\x1BF\a,\x2\x2"+
		"\x1BF\x61\x3\x2\x2\x2\x1C0\x1C4\a?\x2\x2\x1C1\x1C3\x5\x64\x33\x2\x1C2"+
		"\x1C1\x3\x2\x2\x2\x1C3\x1C6\x3\x2\x2\x2\x1C4\x1C2\x3\x2\x2\x2\x1C4\x1C5"+
		"\x3\x2\x2\x2\x1C5\x63\x3\x2\x2\x2\x1C6\x1C4\x3\x2\x2\x2\x1C7\x1C8\a\x15"+
		"\x2\x2\x1C8\x1D2\a?\x2\x2\x1C9\x1CA\a-\x2\x2\x1CA\x1CB\x5V,\x2\x1CB\x1CC"+
		"\a.\x2\x2\x1CC\x1D2\x3\x2\x2\x2\x1CD\x1CE\a+\x2\x2\x1CE\x1CF\x5T+\x2\x1CF"+
		"\x1D0\a,\x2\x2\x1D0\x1D2\x3\x2\x2\x2\x1D1\x1C7\x3\x2\x2\x2\x1D1\x1C9\x3"+
		"\x2\x2\x2\x1D1\x1CD\x3\x2\x2\x2\x1D2\x65\x3\x2\x2\x2\x1D3\x1D4\a?\x2\x2"+
		"\x1D4\x1D6\a\x15\x2\x2\x1D5\x1D3\x3\x2\x2\x2\x1D5\x1D6\x3\x2\x2\x2\x1D6"+
		"\x1D7\x3\x2\x2\x2\x1D7\x1D8\a?\x2\x2\x1D8g\x3\x2\x2\x2.kw\x81\x83\x88"+
		"\x8D\x91\x96\xA4\xB3\xB7\xBD\xC9\xD1\xDA\xDF\xE4\xF3\xF7\xFA\x110\x114"+
		"\x11B\x11F\x122\x136\x13B\x143\x14A\x157\x160\x165\x179\x17E\x196\x19A"+
		"\x19F\x1A4\x1A9\x1AC\x1B9\x1C4\x1D1\x1D5";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SLangGrammar
