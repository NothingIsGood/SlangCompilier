//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SLangGrammar.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SLangGrammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class SLangGrammarParser : Parser {
	public const int
		SimpleType=1, AddOp=2, SubOp=3, MulOp=4, DivOp=5, ModOp=6, BoolOr=7, BoolAnd=8, 
		BoolEq=9, BoolNeq=10, BoolG=11, BoolL=12, BoolGeq=13, BoolLeq=14, BoolNot=15, 
		Colon=16, Semicolon=17, Comma=18, Point=19, Variable=20, Const=21, Let=22, 
		Return=23, Input=24, Output=25, Call=26, Readonly=27, If=28, Then=29, 
		Else=30, While=31, Repeat=32, Elseif=33, Do=34, Module=35, Import=36, 
		Start=37, End=38, Function=39, Procedure=40, LBrace=41, RBrace=42, LSBrace=43, 
		RSBrace=44, Assign=45, New=46, Nil=47, Pointer=48, Array=49, FunctionArgModifier=50, 
		AccessModifier=51, Class=52, Empty=53, Inherit=54, Base=55, Abstract=56, 
		Override=57, From=58, IntValue=59, RealValue=60, BoolValue=61, Id=62, 
		StringLiteral=63, SingleCharacter=64, Comment=65, Ws=66;
	public const int
		RULE_start = 0, RULE_moduleImport = 1, RULE_module = 2, RULE_moduleStatementsSeq = 3, 
		RULE_moduleDeclareSeq = 4, RULE_declare = 5, RULE_variableDecl = 6, RULE_simpleDecl = 7, 
		RULE_arrayDecl = 8, RULE_arrayDeclType = 9, RULE_ptrDecl = 10, RULE_constDecl = 11, 
		RULE_moduleFieldDecl = 12, RULE_typeName = 13, RULE_ptrType = 14, RULE_customType = 15, 
		RULE_scalarType = 16, RULE_simpleType = 17, RULE_arrayType = 18, RULE_arrayDimention = 19, 
		RULE_typeDecl = 20, RULE_typeInherit = 21, RULE_typeFieldDecl = 22, RULE_emptyTypeDecl = 23, 
		RULE_functionDecl = 24, RULE_thisHeader = 25, RULE_routineArgList = 26, 
		RULE_routineArg = 27, RULE_procedureDecl = 28, RULE_importHead = 29, RULE_statementSeq = 30, 
		RULE_statement = 31, RULE_simpleStatement = 32, RULE_complexStatement = 33, 
		RULE_let = 34, RULE_input = 35, RULE_output = 36, RULE_returnC = 37, RULE_call = 38, 
		RULE_ifC = 39, RULE_whileC = 40, RULE_repeatC = 41, RULE_exprList = 42, 
		RULE_exp = 43, RULE_simpleExpr = 44, RULE_term = 45, RULE_signedFactor = 46, 
		RULE_factor = 47, RULE_newC = 48, RULE_designator = 49, RULE_designatorStatement = 50, 
		RULE_qualident = 51;
	public static readonly string[] ruleNames = {
		"start", "moduleImport", "module", "moduleStatementsSeq", "moduleDeclareSeq", 
		"declare", "variableDecl", "simpleDecl", "arrayDecl", "arrayDeclType", 
		"ptrDecl", "constDecl", "moduleFieldDecl", "typeName", "ptrType", "customType", 
		"scalarType", "simpleType", "arrayType", "arrayDimention", "typeDecl", 
		"typeInherit", "typeFieldDecl", "emptyTypeDecl", "functionDecl", "thisHeader", 
		"routineArgList", "routineArg", "procedureDecl", "importHead", "statementSeq", 
		"statement", "simpleStatement", "complexStatement", "let", "input", "output", 
		"returnC", "call", "ifC", "whileC", "repeatC", "exprList", "exp", "simpleExpr", 
		"term", "signedFactor", "factor", "newC", "designator", "designatorStatement", 
		"qualident"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'+'", "'-'", "'*'", "'/'", "'%'", "'||'", "'&&'", "'=='", 
		"'!='", "'>'", "'<'", "'>='", "'<='", "'!'", "':'", "';'", "','", "'.'", 
		"'variable'", "'const'", "'let'", "'return'", "'input'", "'output'", "'call'", 
		"'readonly'", "'if'", "'then'", "'else'", "'while'", "'repeat'", "'elseif'", 
		"'do'", "'module'", "'import'", "'start'", "'end'", "'function'", "'procedure'", 
		"'('", "')'", "'['", "']'", "':='", "'new'", "'nil'", "'pointer'", "'array'", 
		null, null, "'class'", "'empty'", "'inherit'", "'base'", "'abstract'", 
		"'override'", "'from'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SimpleType", "AddOp", "SubOp", "MulOp", "DivOp", "ModOp", "BoolOr", 
		"BoolAnd", "BoolEq", "BoolNeq", "BoolG", "BoolL", "BoolGeq", "BoolLeq", 
		"BoolNot", "Colon", "Semicolon", "Comma", "Point", "Variable", "Const", 
		"Let", "Return", "Input", "Output", "Call", "Readonly", "If", "Then", 
		"Else", "While", "Repeat", "Elseif", "Do", "Module", "Import", "Start", 
		"End", "Function", "Procedure", "LBrace", "RBrace", "LSBrace", "RSBrace", 
		"Assign", "New", "Nil", "Pointer", "Array", "FunctionArgModifier", "AccessModifier", 
		"Class", "Empty", "Inherit", "Base", "Abstract", "Override", "From", "IntValue", 
		"RealValue", "BoolValue", "Id", "StringLiteral", "SingleCharacter", "Comment", 
		"Ws"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SLangGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SLangGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartContext : ParserRuleContext {
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public ModuleImportContext[] moduleImport() {
			return GetRuleContexts<ModuleImportContext>();
		}
		public ModuleImportContext moduleImport(int i) {
			return GetRuleContext<ModuleImportContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Import) {
				{
				{
				State = 104; moduleImport();
				}
				}
				State = 109;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 110; module();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleImportContext : ParserRuleContext {
		public ITerminalNode Import() { return GetToken(SLangGrammarParser.Import, 0); }
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ModuleImportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleImport; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterModuleImport(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitModuleImport(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleImport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleImportContext moduleImport() {
		ModuleImportContext _localctx = new ModuleImportContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_moduleImport);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(Import);
			State = 113; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public ITerminalNode Module() { return GetToken(SLangGrammarParser.Module, 0); }
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ModuleDeclareSeqContext moduleDeclareSeq() {
			return GetRuleContext<ModuleDeclareSeqContext>(0);
		}
		public ITerminalNode Empty() { return GetToken(SLangGrammarParser.Empty, 0); }
		public ModuleStatementsSeqContext moduleStatementsSeq() {
			return GetRuleContext<ModuleStatementsSeqContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Empty) {
				{
				State = 115; Match(Empty);
				}
			}

			State = 118; Match(Module);
			State = 119; Match(Id);
			State = 120; moduleDeclareSeq();
			State = 122;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Start) {
				{
				State = 121; moduleStatementsSeq();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleStatementsSeqContext : ParserRuleContext {
		public ITerminalNode Start() { return GetToken(SLangGrammarParser.Start, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLangGrammarParser.End, 0); }
		public ModuleStatementsSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleStatementsSeq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterModuleStatementsSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitModuleStatementsSeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleStatementsSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleStatementsSeqContext moduleStatementsSeq() {
		ModuleStatementsSeqContext _localctx = new ModuleStatementsSeqContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_moduleStatementsSeq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(Start);
			State = 125; statementSeq();
			State = 126; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclareSeqContext : ParserRuleContext {
		public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		public ProcedureDeclContext[] procedureDecl() {
			return GetRuleContexts<ProcedureDeclContext>();
		}
		public ProcedureDeclContext procedureDecl(int i) {
			return GetRuleContext<ProcedureDeclContext>(i);
		}
		public TypeDeclContext[] typeDecl() {
			return GetRuleContexts<TypeDeclContext>();
		}
		public TypeDeclContext typeDecl(int i) {
			return GetRuleContext<TypeDeclContext>(i);
		}
		public ModuleFieldDeclContext[] moduleFieldDecl() {
			return GetRuleContexts<ModuleFieldDeclContext>();
		}
		public ModuleFieldDeclContext moduleFieldDecl(int i) {
			return GetRuleContext<ModuleFieldDeclContext>(i);
		}
		public EmptyTypeDeclContext[] emptyTypeDecl() {
			return GetRuleContexts<EmptyTypeDeclContext>();
		}
		public EmptyTypeDeclContext emptyTypeDecl(int i) {
			return GetRuleContext<EmptyTypeDeclContext>(i);
		}
		public ModuleDeclareSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclareSeq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterModuleDeclareSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitModuleDeclareSeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclareSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclareSeqContext moduleDeclareSeq() {
		ModuleDeclareSeqContext _localctx = new ModuleDeclareSeqContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_moduleDeclareSeq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LSBrace || _la==AccessModifier) {
				{
				State = 133;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					State = 128; functionDecl();
					}
					break;

				case 2:
					{
					State = 129; procedureDecl();
					}
					break;

				case 3:
					{
					State = 130; typeDecl();
					}
					break;

				case 4:
					{
					State = 131; moduleFieldDecl();
					}
					break;

				case 5:
					{
					State = 132; emptyTypeDecl();
					}
					break;
				}
				}
				State = 137;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public VariableDeclContext variableDecl() {
			return GetRuleContext<VariableDeclContext>(0);
		}
		public ConstDeclContext constDecl() {
			return GetRuleContext<ConstDeclContext>(0);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_declare);
		try {
			State = 140;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Variable:
			case Pointer:
			case Array:
				EnterOuterAlt(_localctx, 1);
				{
				State = 138; variableDecl();
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; constDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclContext : ParserRuleContext {
		public SimpleDeclContext simpleDecl() {
			return GetRuleContext<SimpleDeclContext>(0);
		}
		public ArrayDeclContext arrayDecl() {
			return GetRuleContext<ArrayDeclContext>(0);
		}
		public PtrDeclContext ptrDecl() {
			return GetRuleContext<PtrDeclContext>(0);
		}
		public VariableDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterVariableDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitVariableDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclContext variableDecl() {
		VariableDeclContext _localctx = new VariableDeclContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_variableDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Variable:
				{
				State = 142; simpleDecl();
				}
				break;
			case Array:
				{
				State = 143; arrayDecl();
				}
				break;
			case Pointer:
				{
				State = 144; ptrDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleDeclContext : ParserRuleContext {
		public ITerminalNode Variable() { return GetToken(SLangGrammarParser.Variable, 0); }
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public CustomTypeContext customType() {
			return GetRuleContext<CustomTypeContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(SLangGrammarParser.Assign, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public SimpleDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterSimpleDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitSimpleDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleDeclContext simpleDecl() {
		SimpleDeclContext _localctx = new SimpleDeclContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_simpleDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(Variable);
			State = 150;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SimpleType:
				{
				State = 148; simpleType();
				}
				break;
			case Id:
				{
				State = 149; customType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 152; Match(Id);
			State = 155;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Assign) {
				{
				State = 153; Match(Assign);
				State = 154; exp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclContext : ParserRuleContext {
		public ArrayDeclTypeContext arrayDeclType() {
			return GetRuleContext<ArrayDeclTypeContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ArrayDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterArrayDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitArrayDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclContext arrayDecl() {
		ArrayDeclContext _localctx = new ArrayDeclContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_arrayDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; arrayDeclType();
			State = 158; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclTypeContext : ParserRuleContext {
		public ITerminalNode Array() { return GetToken(SLangGrammarParser.Array, 0); }
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public ITerminalNode[] LSBrace() { return GetTokens(SLangGrammarParser.LSBrace); }
		public ITerminalNode LSBrace(int i) {
			return GetToken(SLangGrammarParser.LSBrace, i);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] RSBrace() { return GetTokens(SLangGrammarParser.RSBrace); }
		public ITerminalNode RSBrace(int i) {
			return GetToken(SLangGrammarParser.RSBrace, i);
		}
		public ArrayDeclTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterArrayDeclType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitArrayDeclType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclTypeContext arrayDeclType() {
		ArrayDeclTypeContext _localctx = new ArrayDeclTypeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_arrayDeclType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(Array);
			State = 165;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 161; Match(LSBrace);
				State = 162; exp();
				State = 163; Match(RSBrace);
				}
				}
				State = 167;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LSBrace );
			State = 169; scalarType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrDeclContext : ParserRuleContext {
		public PtrTypeContext ptrType() {
			return GetRuleContext<PtrTypeContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ITerminalNode Assign() { return GetToken(SLangGrammarParser.Assign, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public PtrDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterPtrDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitPtrDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtrDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtrDeclContext ptrDecl() {
		PtrDeclContext _localctx = new PtrDeclContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_ptrDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; ptrType();
			State = 172; Match(Id);
			State = 175;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Assign) {
				{
				State = 173; Match(Assign);
				State = 174; exp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclContext : ParserRuleContext {
		public ITerminalNode Const() { return GetToken(SLangGrammarParser.Const, 0); }
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ITerminalNode Assign() { return GetToken(SLangGrammarParser.Assign, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ConstDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterConstDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitConstDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclContext constDecl() {
		ConstDeclContext _localctx = new ConstDeclContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_constDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(Const);
			State = 178; scalarType();
			State = 179; Match(Id);
			State = 180; Match(Assign);
			State = 181; exp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleFieldDeclContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLangGrammarParser.AccessModifier, 0); }
		public ITerminalNode Semicolon() { return GetToken(SLangGrammarParser.Semicolon, 0); }
		public VariableDeclContext variableDecl() {
			return GetRuleContext<VariableDeclContext>(0);
		}
		public ConstDeclContext constDecl() {
			return GetRuleContext<ConstDeclContext>(0);
		}
		public ImportHeadContext importHead() {
			return GetRuleContext<ImportHeadContext>(0);
		}
		public ITerminalNode Readonly() { return GetToken(SLangGrammarParser.Readonly, 0); }
		public ModuleFieldDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleFieldDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterModuleFieldDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitModuleFieldDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleFieldDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleFieldDeclContext moduleFieldDecl() {
		ModuleFieldDeclContext _localctx = new ModuleFieldDeclContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_moduleFieldDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LSBrace) {
				{
				State = 183; importHead();
				}
			}

			State = 186; Match(AccessModifier);
			State = 192;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Variable:
			case Readonly:
			case Pointer:
			case Array:
				{
				State = 188;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Readonly) {
					{
					State = 187; Match(Readonly);
					}
				}

				State = 190; variableDecl();
				}
				break;
			case Const:
				{
				State = 191; constDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 194; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_typeName);
		try {
			State = 198;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SimpleType:
			case Pointer:
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				State = 196; scalarType();
				}
				break;
			case Array:
				EnterOuterAlt(_localctx, 2);
				{
				State = 197; arrayType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrTypeContext : ParserRuleContext {
		public ITerminalNode Pointer() { return GetToken(SLangGrammarParser.Pointer, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public CustomTypeContext customType() {
			return GetRuleContext<CustomTypeContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public PtrTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterPtrType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitPtrType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtrType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtrTypeContext ptrType() {
		PtrTypeContext _localctx = new PtrTypeContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_ptrType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(Pointer);
			State = 205;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBrace) {
				{
				State = 201; Match(LBrace);
				State = 202; customType();
				State = 203; Match(RBrace);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomTypeContext : ParserRuleContext {
		public QualidentContext qualident() {
			return GetRuleContext<QualidentContext>(0);
		}
		public CustomTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterCustomType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitCustomType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomTypeContext customType() {
		CustomTypeContext _localctx = new CustomTypeContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_customType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; qualident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarTypeContext : ParserRuleContext {
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public CustomTypeContext customType() {
			return GetRuleContext<CustomTypeContext>(0);
		}
		public PtrTypeContext ptrType() {
			return GetRuleContext<PtrTypeContext>(0);
		}
		public ScalarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterScalarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitScalarType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarTypeContext scalarType() {
		ScalarTypeContext _localctx = new ScalarTypeContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_scalarType);
		try {
			State = 212;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SimpleType:
				EnterOuterAlt(_localctx, 1);
				{
				State = 209; simpleType();
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 210; customType();
				}
				break;
			case Pointer:
				EnterOuterAlt(_localctx, 3);
				{
				State = 211; ptrType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public ITerminalNode SimpleType() { return GetToken(SLangGrammarParser.SimpleType, 0); }
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_simpleType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(SimpleType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public ITerminalNode Array() { return GetToken(SLangGrammarParser.Array, 0); }
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public ArrayDimentionContext[] arrayDimention() {
			return GetRuleContexts<ArrayDimentionContext>();
		}
		public ArrayDimentionContext arrayDimention(int i) {
			return GetRuleContext<ArrayDimentionContext>(i);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_arrayType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(Array);
			State = 218;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 217; arrayDimention();
				}
				}
				State = 220;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==LSBrace );
			State = 222; scalarType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDimentionContext : ParserRuleContext {
		public ITerminalNode LSBrace() { return GetToken(SLangGrammarParser.LSBrace, 0); }
		public ITerminalNode RSBrace() { return GetToken(SLangGrammarParser.RSBrace, 0); }
		public ArrayDimentionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDimention; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterArrayDimention(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitArrayDimention(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDimention(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDimentionContext arrayDimention() {
		ArrayDimentionContext _localctx = new ArrayDimentionContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_arrayDimention);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; Match(LSBrace);
			State = 225; Match(RSBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLangGrammarParser.AccessModifier, 0); }
		public ITerminalNode Class() { return GetToken(SLangGrammarParser.Class, 0); }
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ITerminalNode End() { return GetToken(SLangGrammarParser.End, 0); }
		public ITerminalNode Base() { return GetToken(SLangGrammarParser.Base, 0); }
		public TypeInheritContext typeInherit() {
			return GetRuleContext<TypeInheritContext>(0);
		}
		public TypeFieldDeclContext[] typeFieldDecl() {
			return GetRuleContexts<TypeFieldDeclContext>();
		}
		public TypeFieldDeclContext typeFieldDecl(int i) {
			return GetRuleContext<TypeFieldDeclContext>(i);
		}
		public TypeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterTypeDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitTypeDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclContext typeDecl() {
		TypeDeclContext _localctx = new TypeDeclContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_typeDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; Match(AccessModifier);
			State = 229;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Base) {
				{
				State = 228; Match(Base);
				}
			}

			State = 231; Match(Class);
			State = 232; Match(Id);
			State = 234;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Inherit) {
				{
				State = 233; typeInherit();
				}
			}

			State = 239;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AccessModifier) {
				{
				{
				State = 236; typeFieldDecl();
				}
				}
				State = 241;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 242; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeInheritContext : ParserRuleContext {
		public ITerminalNode Inherit() { return GetToken(SLangGrammarParser.Inherit, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public CustomTypeContext customType() {
			return GetRuleContext<CustomTypeContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public TypeInheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeInherit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterTypeInherit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitTypeInherit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeInherit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeInheritContext typeInherit() {
		TypeInheritContext _localctx = new TypeInheritContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_typeInherit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; Match(Inherit);
			State = 245; Match(LBrace);
			State = 246; customType();
			State = 247; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeFieldDeclContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLangGrammarParser.AccessModifier, 0); }
		public VariableDeclContext variableDecl() {
			return GetRuleContext<VariableDeclContext>(0);
		}
		public ITerminalNode Semicolon() { return GetToken(SLangGrammarParser.Semicolon, 0); }
		public TypeFieldDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeFieldDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterTypeFieldDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitTypeFieldDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeFieldDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeFieldDeclContext typeFieldDecl() {
		TypeFieldDeclContext _localctx = new TypeFieldDeclContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_typeFieldDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(AccessModifier);
			State = 250; variableDecl();
			State = 251; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyTypeDeclContext : ParserRuleContext {
		public ImportHeadContext importHead() {
			return GetRuleContext<ImportHeadContext>(0);
		}
		public ITerminalNode AccessModifier() { return GetToken(SLangGrammarParser.AccessModifier, 0); }
		public ITerminalNode Empty() { return GetToken(SLangGrammarParser.Empty, 0); }
		public ITerminalNode Class() { return GetToken(SLangGrammarParser.Class, 0); }
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ITerminalNode Semicolon() { return GetToken(SLangGrammarParser.Semicolon, 0); }
		public EmptyTypeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyTypeDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterEmptyTypeDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitEmptyTypeDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyTypeDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyTypeDeclContext emptyTypeDecl() {
		EmptyTypeDeclContext _localctx = new EmptyTypeDeclContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_emptyTypeDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; importHead();
			State = 254; Match(AccessModifier);
			State = 255; Match(Empty);
			State = 256; Match(Class);
			State = 257; Match(Id);
			State = 258; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLangGrammarParser.AccessModifier, 0); }
		public ITerminalNode Function() { return GetToken(SLangGrammarParser.Function, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public RoutineArgListContext routineArgList() {
			return GetRuleContext<RoutineArgListContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public ITerminalNode Colon() { return GetToken(SLangGrammarParser.Colon, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLangGrammarParser.End, 0); }
		public ImportHeadContext importHead() {
			return GetRuleContext<ImportHeadContext>(0);
		}
		public ThisHeaderContext thisHeader() {
			return GetRuleContext<ThisHeaderContext>(0);
		}
		public ITerminalNode Abstract() { return GetToken(SLangGrammarParser.Abstract, 0); }
		public ITerminalNode Override() { return GetToken(SLangGrammarParser.Override, 0); }
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LSBrace) {
				{
				State = 260; importHead();
				}
			}

			State = 263; Match(AccessModifier);
			State = 265;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Abstract || _la==Override) {
				{
				State = 264;
				_la = _input.La(1);
				if ( !(_la==Abstract || _la==Override) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 268;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBrace) {
				{
				State = 267; thisHeader();
				}
			}

			State = 270; Match(Function);
			State = 271; Match(LBrace);
			State = 272; routineArgList();
			State = 273; Match(RBrace);
			State = 274; Match(Colon);
			State = 275; typeName();
			State = 276; Match(Id);
			State = 277; statementSeq();
			State = 278; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThisHeaderContext : ParserRuleContext {
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public CustomTypeContext customType() {
			return GetRuleContext<CustomTypeContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public ThisHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thisHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterThisHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitThisHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThisHeaderContext thisHeader() {
		ThisHeaderContext _localctx = new ThisHeaderContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_thisHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; Match(LBrace);
			State = 281; customType();
			State = 282; Match(Id);
			State = 283; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineArgListContext : ParserRuleContext {
		public RoutineArgContext[] routineArg() {
			return GetRuleContexts<RoutineArgContext>();
		}
		public RoutineArgContext routineArg(int i) {
			return GetRuleContext<RoutineArgContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SLangGrammarParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SLangGrammarParser.Comma, i);
		}
		public RoutineArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterRoutineArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitRoutineArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineArgListContext routineArgList() {
		RoutineArgListContext _localctx = new RoutineArgListContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_routineArgList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FunctionArgModifier:
				{
				State = 285; routineArg();
				State = 290;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==Comma) {
					{
					{
					State = 286; Match(Comma);
					State = 287; routineArg();
					}
					}
					State = 292;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case RBrace:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineArgContext : ParserRuleContext {
		public ITerminalNode FunctionArgModifier() { return GetToken(SLangGrammarParser.FunctionArgModifier, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public RoutineArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterRoutineArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitRoutineArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineArgContext routineArg() {
		RoutineArgContext _localctx = new RoutineArgContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_routineArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; Match(FunctionArgModifier);
			State = 297; typeName();
			State = 298; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDeclContext : ParserRuleContext {
		public ITerminalNode AccessModifier() { return GetToken(SLangGrammarParser.AccessModifier, 0); }
		public ITerminalNode Procedure() { return GetToken(SLangGrammarParser.Procedure, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public RoutineArgListContext routineArgList() {
			return GetRuleContext<RoutineArgListContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLangGrammarParser.End, 0); }
		public ImportHeadContext importHead() {
			return GetRuleContext<ImportHeadContext>(0);
		}
		public ThisHeaderContext thisHeader() {
			return GetRuleContext<ThisHeaderContext>(0);
		}
		public ITerminalNode Abstract() { return GetToken(SLangGrammarParser.Abstract, 0); }
		public ITerminalNode Override() { return GetToken(SLangGrammarParser.Override, 0); }
		public ProcedureDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterProcedureDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitProcedureDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDeclContext procedureDecl() {
		ProcedureDeclContext _localctx = new ProcedureDeclContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_procedureDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LSBrace) {
				{
				State = 300; importHead();
				}
			}

			State = 303; Match(AccessModifier);
			State = 305;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Abstract || _la==Override) {
				{
				State = 304;
				_la = _input.La(1);
				if ( !(_la==Abstract || _la==Override) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 308;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBrace) {
				{
				State = 307; thisHeader();
				}
			}

			State = 310; Match(Procedure);
			State = 311; Match(LBrace);
			State = 312; routineArgList();
			State = 313; Match(RBrace);
			State = 314; Match(Id);
			State = 315; statementSeq();
			State = 316; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportHeadContext : ParserRuleContext {
		public ITerminalNode LSBrace() { return GetToken(SLangGrammarParser.LSBrace, 0); }
		public ITerminalNode From() { return GetToken(SLangGrammarParser.From, 0); }
		public ITerminalNode[] StringLiteral() { return GetTokens(SLangGrammarParser.StringLiteral); }
		public ITerminalNode StringLiteral(int i) {
			return GetToken(SLangGrammarParser.StringLiteral, i);
		}
		public ITerminalNode Import() { return GetToken(SLangGrammarParser.Import, 0); }
		public ITerminalNode RSBrace() { return GetToken(SLangGrammarParser.RSBrace, 0); }
		public ImportHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importHead; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterImportHead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitImportHead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportHeadContext importHead() {
		ImportHeadContext _localctx = new ImportHeadContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_importHead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; Match(LSBrace);
			State = 319; Match(From);
			State = 320; Match(StringLiteral);
			State = 321; Match(Import);
			State = 322; Match(StringLiteral);
			State = 323; Match(RSBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementSeqContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSeq; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterStatementSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitStatementSeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementSeqContext statementSeq() {
		StatementSeqContext _localctx = new StatementSeqContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_statementSeq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 325; statement();
					}
					} 
				}
				State = 330;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public ComplexStatementContext complexStatement() {
			return GetRuleContext<ComplexStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_statement);
		try {
			State = 333;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Variable:
			case Const:
			case Let:
			case Return:
			case Input:
			case Output:
			case Call:
			case Pointer:
			case Array:
				EnterOuterAlt(_localctx, 1);
				{
				State = 331; simpleStatement();
				}
				break;
			case If:
			case While:
			case Repeat:
				EnterOuterAlt(_localctx, 2);
				{
				State = 332; complexStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		public ITerminalNode Semicolon() { return GetToken(SLangGrammarParser.Semicolon, 0); }
		public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public OutputContext output() {
			return GetRuleContext<OutputContext>(0);
		}
		public ReturnCContext returnC() {
			return GetRuleContext<ReturnCContext>(0);
		}
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_simpleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Variable:
			case Const:
			case Pointer:
			case Array:
				{
				State = 335; declare();
				}
				break;
			case Let:
				{
				State = 336; let();
				}
				break;
			case Input:
				{
				State = 337; input();
				}
				break;
			case Output:
				{
				State = 338; output();
				}
				break;
			case Return:
				{
				State = 339; returnC();
				}
				break;
			case Call:
				{
				State = 340; call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 343; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexStatementContext : ParserRuleContext {
		public IfCContext ifC() {
			return GetRuleContext<IfCContext>(0);
		}
		public WhileCContext whileC() {
			return GetRuleContext<WhileCContext>(0);
		}
		public RepeatCContext repeatC() {
			return GetRuleContext<RepeatCContext>(0);
		}
		public ComplexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterComplexStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitComplexStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexStatementContext complexStatement() {
		ComplexStatementContext _localctx = new ComplexStatementContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_complexStatement);
		try {
			State = 348;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 345; ifC();
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 2);
				{
				State = 346; whileC();
				}
				break;
			case Repeat:
				EnterOuterAlt(_localctx, 3);
				{
				State = 347; repeatC();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		public ITerminalNode Let() { return GetToken(SLangGrammarParser.Let, 0); }
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(SLangGrammarParser.Assign, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterLet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitLet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; Match(Let);
			State = 351; designator();
			State = 352; Match(Assign);
			State = 353; exp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public ITerminalNode Input() { return GetToken(SLangGrammarParser.Input, 0); }
		public DesignatorContext[] designator() {
			return GetRuleContexts<DesignatorContext>();
		}
		public DesignatorContext designator(int i) {
			return GetRuleContext<DesignatorContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SLangGrammarParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SLangGrammarParser.Comma, i);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; Match(Input);
			State = 356; designator();
			State = 361;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Comma) {
				{
				{
				State = 357; Match(Comma);
				State = 358; designator();
				}
				}
				State = 363;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		public ITerminalNode Output() { return GetToken(SLangGrammarParser.Output, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SLangGrammarParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SLangGrammarParser.Comma, i);
		}
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_output);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; Match(Output);
			State = 365; exp();
			State = 370;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Comma) {
				{
				{
				State = 366; Match(Comma);
				State = 367; exp();
				}
				}
				State = 372;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnCContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(SLangGrammarParser.Return, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ReturnCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnC; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterReturnC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitReturnC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnCContext returnC() {
		ReturnCContext _localctx = new ReturnCContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_returnC);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; Match(Return);
			State = 375;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & ((1L << (AddOp - 2)) | (1L << (SubOp - 2)) | (1L << (BoolNot - 2)) | (1L << (LBrace - 2)) | (1L << (New - 2)) | (1L << (Nil - 2)) | (1L << (IntValue - 2)) | (1L << (RealValue - 2)) | (1L << (BoolValue - 2)) | (1L << (Id - 2)) | (1L << (StringLiteral - 2)) | (1L << (SingleCharacter - 2)))) != 0)) {
				{
				State = 374; exp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public ITerminalNode Call() { return GetToken(SLangGrammarParser.Call, 0); }
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; Match(Call);
			State = 378; designator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfCContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(SLangGrammarParser.If, 0); }
		public ITerminalNode[] LBrace() { return GetTokens(SLangGrammarParser.LBrace); }
		public ITerminalNode LBrace(int i) {
			return GetToken(SLangGrammarParser.LBrace, i);
		}
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] RBrace() { return GetTokens(SLangGrammarParser.RBrace); }
		public ITerminalNode RBrace(int i) {
			return GetToken(SLangGrammarParser.RBrace, i);
		}
		public ITerminalNode[] Then() { return GetTokens(SLangGrammarParser.Then); }
		public ITerminalNode Then(int i) {
			return GetToken(SLangGrammarParser.Then, i);
		}
		public StatementSeqContext[] statementSeq() {
			return GetRuleContexts<StatementSeqContext>();
		}
		public StatementSeqContext statementSeq(int i) {
			return GetRuleContext<StatementSeqContext>(i);
		}
		public ITerminalNode End() { return GetToken(SLangGrammarParser.End, 0); }
		public ITerminalNode[] Elseif() { return GetTokens(SLangGrammarParser.Elseif); }
		public ITerminalNode Elseif(int i) {
			return GetToken(SLangGrammarParser.Elseif, i);
		}
		public ITerminalNode Else() { return GetToken(SLangGrammarParser.Else, 0); }
		public IfCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifC; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterIfC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitIfC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfCContext ifC() {
		IfCContext _localctx = new IfCContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_ifC);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(If);
			State = 381; Match(LBrace);
			State = 382; exp();
			State = 383; Match(RBrace);
			State = 384; Match(Then);
			State = 385; statementSeq();
			State = 395;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Elseif) {
				{
				{
				State = 386; Match(Elseif);
				State = 387; Match(LBrace);
				State = 388; exp();
				State = 389; Match(RBrace);
				State = 390; Match(Then);
				State = 391; statementSeq();
				}
				}
				State = 397;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 400;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Else) {
				{
				State = 398; Match(Else);
				State = 399; statementSeq();
				}
			}

			State = 402; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileCContext : ParserRuleContext {
		public ITerminalNode While() { return GetToken(SLangGrammarParser.While, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public ITerminalNode Do() { return GetToken(SLangGrammarParser.Do, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode End() { return GetToken(SLangGrammarParser.End, 0); }
		public WhileCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileC; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterWhileC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitWhileC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileCContext whileC() {
		WhileCContext _localctx = new WhileCContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_whileC);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404; Match(While);
			State = 405; Match(LBrace);
			State = 406; exp();
			State = 407; Match(RBrace);
			State = 408; Match(Do);
			State = 409; statementSeq();
			State = 410; Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatCContext : ParserRuleContext {
		public ITerminalNode Repeat() { return GetToken(SLangGrammarParser.Repeat, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public ITerminalNode While() { return GetToken(SLangGrammarParser.While, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public RepeatCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatC; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterRepeatC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitRepeatC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatCContext repeatC() {
		RepeatCContext _localctx = new RepeatCContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_repeatC);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; Match(Repeat);
			State = 413; statementSeq();
			State = 414; Match(While);
			State = 415; Match(LBrace);
			State = 416; exp();
			State = 417; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SLangGrammarParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SLangGrammarParser.Comma, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case AddOp:
			case SubOp:
			case BoolNot:
			case LBrace:
			case New:
			case Nil:
			case IntValue:
			case RealValue:
			case BoolValue:
			case Id:
			case StringLiteral:
			case SingleCharacter:
				{
				State = 419; exp();
				State = 424;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==Comma) {
					{
					{
					State = 420; Match(Comma);
					State = 421; exp();
					}
					}
					State = 426;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case RBrace:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode BoolEq() { return GetToken(SLangGrammarParser.BoolEq, 0); }
		public ITerminalNode BoolNeq() { return GetToken(SLangGrammarParser.BoolNeq, 0); }
		public ITerminalNode BoolG() { return GetToken(SLangGrammarParser.BoolG, 0); }
		public ITerminalNode BoolL() { return GetToken(SLangGrammarParser.BoolL, 0); }
		public ITerminalNode BoolLeq() { return GetToken(SLangGrammarParser.BoolLeq, 0); }
		public ITerminalNode BoolGeq() { return GetToken(SLangGrammarParser.BoolGeq, 0); }
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		ExpContext _localctx = new ExpContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_exp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; simpleExpr();
			State = 433;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BoolEq) | (1L << BoolNeq) | (1L << BoolG) | (1L << BoolL) | (1L << BoolGeq) | (1L << BoolLeq))) != 0)) {
				{
				State = 431;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BoolEq) | (1L << BoolNeq) | (1L << BoolG) | (1L << BoolL) | (1L << BoolGeq) | (1L << BoolLeq))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 432; exp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExprContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public ITerminalNode AddOp() { return GetToken(SLangGrammarParser.AddOp, 0); }
		public ITerminalNode SubOp() { return GetToken(SLangGrammarParser.SubOp, 0); }
		public ITerminalNode BoolOr() { return GetToken(SLangGrammarParser.BoolOr, 0); }
		public SimpleExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterSimpleExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitSimpleExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExprContext simpleExpr() {
		SimpleExprContext _localctx = new SimpleExprContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_simpleExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435; term();
			State = 438;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AddOp) | (1L << SubOp) | (1L << BoolOr))) != 0)) {
				{
				State = 436;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AddOp) | (1L << SubOp) | (1L << BoolOr))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 437; simpleExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public SignedFactorContext signedFactor() {
			return GetRuleContext<SignedFactorContext>(0);
		}
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode MulOp() { return GetToken(SLangGrammarParser.MulOp, 0); }
		public ITerminalNode DivOp() { return GetToken(SLangGrammarParser.DivOp, 0); }
		public ITerminalNode BoolAnd() { return GetToken(SLangGrammarParser.BoolAnd, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; signedFactor();
			State = 443;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MulOp) | (1L << DivOp) | (1L << BoolAnd))) != 0)) {
				{
				State = 441;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MulOp) | (1L << DivOp) | (1L << BoolAnd))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 442; term();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedFactorContext : ParserRuleContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode AddOp() { return GetToken(SLangGrammarParser.AddOp, 0); }
		public ITerminalNode SubOp() { return GetToken(SLangGrammarParser.SubOp, 0); }
		public SignedFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedFactor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterSignedFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitSignedFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedFactorContext signedFactor() {
		SignedFactorContext _localctx = new SignedFactorContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_signedFactor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AddOp || _la==SubOp) {
				{
				State = 445;
				_la = _input.La(1);
				if ( !(_la==AddOp || _la==SubOp) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 448; factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode IntValue() { return GetToken(SLangGrammarParser.IntValue, 0); }
		public ITerminalNode RealValue() { return GetToken(SLangGrammarParser.RealValue, 0); }
		public ITerminalNode BoolValue() { return GetToken(SLangGrammarParser.BoolValue, 0); }
		public ITerminalNode StringLiteral() { return GetToken(SLangGrammarParser.StringLiteral, 0); }
		public ITerminalNode SingleCharacter() { return GetToken(SLangGrammarParser.SingleCharacter, 0); }
		public ITerminalNode Nil() { return GetToken(SLangGrammarParser.Nil, 0); }
		public ITerminalNode BoolNot() { return GetToken(SLangGrammarParser.BoolNot, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public NewCContext newC() {
			return GetRuleContext<NewCContext>(0);
		}
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_factor);
		int _la;
		try {
			State = 459;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				State = 450; designator();
				}
				break;
			case Nil:
			case IntValue:
			case RealValue:
			case BoolValue:
			case StringLiteral:
			case SingleCharacter:
				EnterOuterAlt(_localctx, 2);
				{
				State = 451;
				_la = _input.La(1);
				if ( !(((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & ((1L << (Nil - 47)) | (1L << (IntValue - 47)) | (1L << (RealValue - 47)) | (1L << (BoolValue - 47)) | (1L << (StringLiteral - 47)) | (1L << (SingleCharacter - 47)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case BoolNot:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 452; Match(BoolNot);
				State = 453; factor();
				}
				}
				break;
			case New:
				EnterOuterAlt(_localctx, 4);
				{
				State = 454; newC();
				}
				break;
			case LBrace:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 455; Match(LBrace);
				State = 456; exp();
				State = 457; Match(RBrace);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewCContext : ParserRuleContext {
		public ITerminalNode New() { return GetToken(SLangGrammarParser.New, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public CustomTypeContext customType() {
			return GetRuleContext<CustomTypeContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public NewCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newC; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterNewC(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitNewC(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewCContext newC() {
		NewCContext _localctx = new NewCContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_newC);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461; Match(New);
			State = 462; Match(LBrace);
			State = 463; customType();
			State = 464; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public DesignatorStatementContext[] designatorStatement() {
			return GetRuleContexts<DesignatorStatementContext>();
		}
		public DesignatorStatementContext designatorStatement(int i) {
			return GetRuleContext<DesignatorStatementContext>(i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466; Match(Id);
			State = 470;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Point) | (1L << LBrace) | (1L << LSBrace))) != 0)) {
				{
				{
				State = 467; designatorStatement();
				}
				}
				State = 472;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorStatementContext : ParserRuleContext {
		public ITerminalNode Point() { return GetToken(SLangGrammarParser.Point, 0); }
		public ITerminalNode Id() { return GetToken(SLangGrammarParser.Id, 0); }
		public ITerminalNode LSBrace() { return GetToken(SLangGrammarParser.LSBrace, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode RSBrace() { return GetToken(SLangGrammarParser.RSBrace, 0); }
		public ITerminalNode LBrace() { return GetToken(SLangGrammarParser.LBrace, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(SLangGrammarParser.RBrace, 0); }
		public DesignatorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designatorStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterDesignatorStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitDesignatorStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorStatementContext designatorStatement() {
		DesignatorStatementContext _localctx = new DesignatorStatementContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_designatorStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Point:
				{
				State = 473; Match(Point);
				State = 474; Match(Id);
				}
				break;
			case LSBrace:
				{
				State = 475; Match(LSBrace);
				State = 476; exp();
				State = 477; Match(RSBrace);
				}
				break;
			case LBrace:
				{
				State = 479; Match(LBrace);
				State = 480; exprList();
				State = 481; Match(RBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualidentContext : ParserRuleContext {
		public ITerminalNode[] Id() { return GetTokens(SLangGrammarParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(SLangGrammarParser.Id, i);
		}
		public ITerminalNode Point() { return GetToken(SLangGrammarParser.Point, 0); }
		public QualidentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualident; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.EnterQualident(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISLangGrammarListener typedListener = listener as ISLangGrammarListener;
			if (typedListener != null) typedListener.ExitQualident(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISLangGrammarVisitor<TResult> typedVisitor = visitor as ISLangGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualident(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualidentContext qualident() {
		QualidentContext _localctx = new QualidentContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_qualident);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 485; Match(Id);
				State = 486; Match(Point);
				}
				break;
			}
			State = 489; Match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x44\x1EE\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x3\x2\a\x2l\n\x2\f\x2\xE"+
		"\x2o\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x5\x4w\n\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x5\x4}\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\a\x6\x88\n\x6\f\x6\xE\x6\x8B\v\x6\x3\a\x3\a\x5\a\x8F\n\a\x3"+
		"\b\x3\b\x3\b\x5\b\x94\n\b\x3\t\x3\t\x3\t\x5\t\x99\n\t\x3\t\x3\t\x3\t\x5"+
		"\t\x9E\n\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x6\v\xA8\n\v\r\v\xE"+
		"\v\xA9\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x5\f\xB2\n\f\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\xE\x5\xE\xBB\n\xE\x3\xE\x3\xE\x5\xE\xBF\n\xE\x3\xE\x3\xE"+
		"\x5\xE\xC3\n\xE\x3\xE\x3\xE\x3\xF\x3\xF\x5\xF\xC9\n\xF\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x5\x10\xD0\n\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12"+
		"\x5\x12\xD7\n\x12\x3\x13\x3\x13\x3\x14\x3\x14\x6\x14\xDD\n\x14\r\x14\xE"+
		"\x14\xDE\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x5\x16\xE8\n"+
		"\x16\x3\x16\x3\x16\x3\x16\x5\x16\xED\n\x16\x3\x16\a\x16\xF0\n\x16\f\x16"+
		"\xE\x16\xF3\v\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x1A\x5\x1A\x108\n\x1A\x3\x1A\x3\x1A\x5\x1A\x10C\n\x1A\x3\x1A\x5"+
		"\x1A\x10F\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C"+
		"\a\x1C\x123\n\x1C\f\x1C\xE\x1C\x126\v\x1C\x3\x1C\x5\x1C\x129\n\x1C\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x5\x1E\x130\n\x1E\x3\x1E\x3\x1E\x5\x1E"+
		"\x134\n\x1E\x3\x1E\x5\x1E\x137\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3 \a \x149\n \f \xE \x14C\v \x3!\x3!\x5!\x150\n!\x3\"\x3\"\x3\"\x3\""+
		"\x3\"\x3\"\x5\"\x158\n\"\x3\"\x3\"\x3#\x3#\x3#\x5#\x15F\n#\x3$\x3$\x3"+
		"$\x3$\x3$\x3%\x3%\x3%\x3%\a%\x16A\n%\f%\xE%\x16D\v%\x3&\x3&\x3&\x3&\a"+
		"&\x173\n&\f&\xE&\x176\v&\x3\'\x3\'\x5\'\x17A\n\'\x3(\x3(\x3(\x3)\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\a)\x18C\n)\f)\xE)\x18F\v)\x3"+
		")\x3)\x5)\x193\n)\x3)\x3)\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3+\x3+\x3+"+
		"\x3+\x3+\x3+\x3+\x3,\x3,\x3,\a,\x1A9\n,\f,\xE,\x1AC\v,\x3,\x5,\x1AF\n"+
		",\x3-\x3-\x3-\x5-\x1B4\n-\x3.\x3.\x3.\x5.\x1B9\n.\x3/\x3/\x3/\x5/\x1BE"+
		"\n/\x3\x30\x5\x30\x1C1\n\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31"+
		"\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x1CE\n\x31\x3\x32\x3\x32\x3"+
		"\x32\x3\x32\x3\x32\x3\x33\x3\x33\a\x33\x1D7\n\x33\f\x33\xE\x33\x1DA\v"+
		"\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3"+
		"\x34\x5\x34\x1E6\n\x34\x3\x35\x3\x35\x5\x35\x1EA\n\x35\x3\x35\x3\x35\x3"+
		"\x35\x2\x2\x2\x36\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2"+
		"\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2"+
		".\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2"+
		"\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64"+
		"\x2\x66\x2h\x2\x2\b\x3\x2:;\x3\x2\v\x10\x4\x2\x4\x5\t\t\x4\x2\x6\a\n\n"+
		"\x3\x2\x4\x5\x5\x2\x31\x31=?\x41\x42\x1F7\x2m\x3\x2\x2\x2\x4r\x3\x2\x2"+
		"\x2\x6v\x3\x2\x2\x2\b~\x3\x2\x2\x2\n\x89\x3\x2\x2\x2\f\x8E\x3\x2\x2\x2"+
		"\xE\x93\x3\x2\x2\x2\x10\x95\x3\x2\x2\x2\x12\x9F\x3\x2\x2\x2\x14\xA2\x3"+
		"\x2\x2\x2\x16\xAD\x3\x2\x2\x2\x18\xB3\x3\x2\x2\x2\x1A\xBA\x3\x2\x2\x2"+
		"\x1C\xC8\x3\x2\x2\x2\x1E\xCA\x3\x2\x2\x2 \xD1\x3\x2\x2\x2\"\xD6\x3\x2"+
		"\x2\x2$\xD8\x3\x2\x2\x2&\xDA\x3\x2\x2\x2(\xE2\x3\x2\x2\x2*\xE5\x3\x2\x2"+
		"\x2,\xF6\x3\x2\x2\x2.\xFB\x3\x2\x2\x2\x30\xFF\x3\x2\x2\x2\x32\x107\x3"+
		"\x2\x2\x2\x34\x11A\x3\x2\x2\x2\x36\x128\x3\x2\x2\x2\x38\x12A\x3\x2\x2"+
		"\x2:\x12F\x3\x2\x2\x2<\x140\x3\x2\x2\x2>\x14A\x3\x2\x2\x2@\x14F\x3\x2"+
		"\x2\x2\x42\x157\x3\x2\x2\x2\x44\x15E\x3\x2\x2\x2\x46\x160\x3\x2\x2\x2"+
		"H\x165\x3\x2\x2\x2J\x16E\x3\x2\x2\x2L\x177\x3\x2\x2\x2N\x17B\x3\x2\x2"+
		"\x2P\x17E\x3\x2\x2\x2R\x196\x3\x2\x2\x2T\x19E\x3\x2\x2\x2V\x1AE\x3\x2"+
		"\x2\x2X\x1B0\x3\x2\x2\x2Z\x1B5\x3\x2\x2\x2\\\x1BA\x3\x2\x2\x2^\x1C0\x3"+
		"\x2\x2\x2`\x1CD\x3\x2\x2\x2\x62\x1CF\x3\x2\x2\x2\x64\x1D4\x3\x2\x2\x2"+
		"\x66\x1E5\x3\x2\x2\x2h\x1E9\x3\x2\x2\x2jl\x5\x4\x3\x2kj\x3\x2\x2\x2lo"+
		"\x3\x2\x2\x2mk\x3\x2\x2\x2mn\x3\x2\x2\x2np\x3\x2\x2\x2om\x3\x2\x2\x2p"+
		"q\x5\x6\x4\x2q\x3\x3\x2\x2\x2rs\a&\x2\x2st\a@\x2\x2t\x5\x3\x2\x2\x2uw"+
		"\a\x37\x2\x2vu\x3\x2\x2\x2vw\x3\x2\x2\x2wx\x3\x2\x2\x2xy\a%\x2\x2yz\a"+
		"@\x2\x2z|\x5\n\x6\x2{}\x5\b\x5\x2|{\x3\x2\x2\x2|}\x3\x2\x2\x2}\a\x3\x2"+
		"\x2\x2~\x7F\a\'\x2\x2\x7F\x80\x5> \x2\x80\x81\a(\x2\x2\x81\t\x3\x2\x2"+
		"\x2\x82\x88\x5\x32\x1A\x2\x83\x88\x5:\x1E\x2\x84\x88\x5*\x16\x2\x85\x88"+
		"\x5\x1A\xE\x2\x86\x88\x5\x30\x19\x2\x87\x82\x3\x2\x2\x2\x87\x83\x3\x2"+
		"\x2\x2\x87\x84\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x87\x86\x3\x2\x2\x2\x88"+
		"\x8B\x3\x2\x2\x2\x89\x87\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\v\x3\x2\x2"+
		"\x2\x8B\x89\x3\x2\x2\x2\x8C\x8F\x5\xE\b\x2\x8D\x8F\x5\x18\r\x2\x8E\x8C"+
		"\x3\x2\x2\x2\x8E\x8D\x3\x2\x2\x2\x8F\r\x3\x2\x2\x2\x90\x94\x5\x10\t\x2"+
		"\x91\x94\x5\x12\n\x2\x92\x94\x5\x16\f\x2\x93\x90\x3\x2\x2\x2\x93\x91\x3"+
		"\x2\x2\x2\x93\x92\x3\x2\x2\x2\x94\xF\x3\x2\x2\x2\x95\x98\a\x16\x2\x2\x96"+
		"\x99\x5$\x13\x2\x97\x99\x5 \x11\x2\x98\x96\x3\x2\x2\x2\x98\x97\x3\x2\x2"+
		"\x2\x99\x9A\x3\x2\x2\x2\x9A\x9D\a@\x2\x2\x9B\x9C\a/\x2\x2\x9C\x9E\x5X"+
		"-\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\x11\x3\x2\x2\x2\x9F\xA0"+
		"\x5\x14\v\x2\xA0\xA1\a@\x2\x2\xA1\x13\x3\x2\x2\x2\xA2\xA7\a\x33\x2\x2"+
		"\xA3\xA4\a-\x2\x2\xA4\xA5\x5X-\x2\xA5\xA6\a.\x2\x2\xA6\xA8\x3\x2\x2\x2"+
		"\xA7\xA3\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xA9\xAA\x3"+
		"\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAC\x5\"\x12\x2\xAC\x15\x3\x2\x2\x2"+
		"\xAD\xAE\x5\x1E\x10\x2\xAE\xB1\a@\x2\x2\xAF\xB0\a/\x2\x2\xB0\xB2\x5X-"+
		"\x2\xB1\xAF\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\x17\x3\x2\x2\x2\xB3\xB4"+
		"\a\x17\x2\x2\xB4\xB5\x5\"\x12\x2\xB5\xB6\a@\x2\x2\xB6\xB7\a/\x2\x2\xB7"+
		"\xB8\x5X-\x2\xB8\x19\x3\x2\x2\x2\xB9\xBB\x5<\x1F\x2\xBA\xB9\x3\x2\x2\x2"+
		"\xBA\xBB\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xC2\a\x35\x2\x2\xBD\xBF\a"+
		"\x1D\x2\x2\xBE\xBD\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2"+
		"\xC0\xC3\x5\xE\b\x2\xC1\xC3\x5\x18\r\x2\xC2\xBE\x3\x2\x2\x2\xC2\xC1\x3"+
		"\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xC5\a\x13\x2\x2\xC5\x1B\x3\x2\x2\x2"+
		"\xC6\xC9\x5\"\x12\x2\xC7\xC9\x5&\x14\x2\xC8\xC6\x3\x2\x2\x2\xC8\xC7\x3"+
		"\x2\x2\x2\xC9\x1D\x3\x2\x2\x2\xCA\xCF\a\x32\x2\x2\xCB\xCC\a+\x2\x2\xCC"+
		"\xCD\x5 \x11\x2\xCD\xCE\a,\x2\x2\xCE\xD0\x3\x2\x2\x2\xCF\xCB\x3\x2\x2"+
		"\x2\xCF\xD0\x3\x2\x2\x2\xD0\x1F\x3\x2\x2\x2\xD1\xD2\x5h\x35\x2\xD2!\x3"+
		"\x2\x2\x2\xD3\xD7\x5$\x13\x2\xD4\xD7\x5 \x11\x2\xD5\xD7\x5\x1E\x10\x2"+
		"\xD6\xD3\x3\x2\x2\x2\xD6\xD4\x3\x2\x2\x2\xD6\xD5\x3\x2\x2\x2\xD7#\x3\x2"+
		"\x2\x2\xD8\xD9\a\x3\x2\x2\xD9%\x3\x2\x2\x2\xDA\xDC\a\x33\x2\x2\xDB\xDD"+
		"\x5(\x15\x2\xDC\xDB\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2"+
		"\xDE\xDF\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE1\x5\"\x12\x2\xE1\'\x3"+
		"\x2\x2\x2\xE2\xE3\a-\x2\x2\xE3\xE4\a.\x2\x2\xE4)\x3\x2\x2\x2\xE5\xE7\a"+
		"\x35\x2\x2\xE6\xE8\a\x39\x2\x2\xE7\xE6\x3\x2\x2\x2\xE7\xE8\x3\x2\x2\x2"+
		"\xE8\xE9\x3\x2\x2\x2\xE9\xEA\a\x36\x2\x2\xEA\xEC\a@\x2\x2\xEB\xED\x5,"+
		"\x17\x2\xEC\xEB\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\xF1\x3\x2\x2\x2\xEE"+
		"\xF0\x5.\x18\x2\xEF\xEE\x3\x2\x2\x2\xF0\xF3\x3\x2\x2\x2\xF1\xEF\x3\x2"+
		"\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\xF4\x3\x2\x2\x2\xF3\xF1\x3\x2\x2\x2\xF4"+
		"\xF5\a(\x2\x2\xF5+\x3\x2\x2\x2\xF6\xF7\a\x38\x2\x2\xF7\xF8\a+\x2\x2\xF8"+
		"\xF9\x5 \x11\x2\xF9\xFA\a,\x2\x2\xFA-\x3\x2\x2\x2\xFB\xFC\a\x35\x2\x2"+
		"\xFC\xFD\x5\xE\b\x2\xFD\xFE\a\x13\x2\x2\xFE/\x3\x2\x2\x2\xFF\x100\x5<"+
		"\x1F\x2\x100\x101\a\x35\x2\x2\x101\x102\a\x37\x2\x2\x102\x103\a\x36\x2"+
		"\x2\x103\x104\a@\x2\x2\x104\x105\a\x13\x2\x2\x105\x31\x3\x2\x2\x2\x106"+
		"\x108\x5<\x1F\x2\x107\x106\x3\x2\x2\x2\x107\x108\x3\x2\x2\x2\x108\x109"+
		"\x3\x2\x2\x2\x109\x10B\a\x35\x2\x2\x10A\x10C\t\x2\x2\x2\x10B\x10A\x3\x2"+
		"\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10E\x3\x2\x2\x2\x10D\x10F\x5\x34\x1B"+
		"\x2\x10E\x10D\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2"+
		"\x110\x111\a)\x2\x2\x111\x112\a+\x2\x2\x112\x113\x5\x36\x1C\x2\x113\x114"+
		"\a,\x2\x2\x114\x115\a\x12\x2\x2\x115\x116\x5\x1C\xF\x2\x116\x117\a@\x2"+
		"\x2\x117\x118\x5> \x2\x118\x119\a(\x2\x2\x119\x33\x3\x2\x2\x2\x11A\x11B"+
		"\a+\x2\x2\x11B\x11C\x5 \x11\x2\x11C\x11D\a@\x2\x2\x11D\x11E\a,\x2\x2\x11E"+
		"\x35\x3\x2\x2\x2\x11F\x124\x5\x38\x1D\x2\x120\x121\a\x14\x2\x2\x121\x123"+
		"\x5\x38\x1D\x2\x122\x120\x3\x2\x2\x2\x123\x126\x3\x2\x2\x2\x124\x122\x3"+
		"\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125\x129\x3\x2\x2\x2\x126\x124\x3\x2"+
		"\x2\x2\x127\x129\x3\x2\x2\x2\x128\x11F\x3\x2\x2\x2\x128\x127\x3\x2\x2"+
		"\x2\x129\x37\x3\x2\x2\x2\x12A\x12B\a\x34\x2\x2\x12B\x12C\x5\x1C\xF\x2"+
		"\x12C\x12D\a@\x2\x2\x12D\x39\x3\x2\x2\x2\x12E\x130\x5<\x1F\x2\x12F\x12E"+
		"\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130\x131\x3\x2\x2\x2\x131\x133\a\x35"+
		"\x2\x2\x132\x134\t\x2\x2\x2\x133\x132\x3\x2\x2\x2\x133\x134\x3\x2\x2\x2"+
		"\x134\x136\x3\x2\x2\x2\x135\x137\x5\x34\x1B\x2\x136\x135\x3\x2\x2\x2\x136"+
		"\x137\x3\x2\x2\x2\x137\x138\x3\x2\x2\x2\x138\x139\a*\x2\x2\x139\x13A\a"+
		"+\x2\x2\x13A\x13B\x5\x36\x1C\x2\x13B\x13C\a,\x2\x2\x13C\x13D\a@\x2\x2"+
		"\x13D\x13E\x5> \x2\x13E\x13F\a(\x2\x2\x13F;\x3\x2\x2\x2\x140\x141\a-\x2"+
		"\x2\x141\x142\a<\x2\x2\x142\x143\a\x41\x2\x2\x143\x144\a&\x2\x2\x144\x145"+
		"\a\x41\x2\x2\x145\x146\a.\x2\x2\x146=\x3\x2\x2\x2\x147\x149\x5@!\x2\x148"+
		"\x147\x3\x2\x2\x2\x149\x14C\x3\x2\x2\x2\x14A\x148\x3\x2\x2\x2\x14A\x14B"+
		"\x3\x2\x2\x2\x14B?\x3\x2\x2\x2\x14C\x14A\x3\x2\x2\x2\x14D\x150\x5\x42"+
		"\"\x2\x14E\x150\x5\x44#\x2\x14F\x14D\x3\x2\x2\x2\x14F\x14E\x3\x2\x2\x2"+
		"\x150\x41\x3\x2\x2\x2\x151\x158\x5\f\a\x2\x152\x158\x5\x46$\x2\x153\x158"+
		"\x5H%\x2\x154\x158\x5J&\x2\x155\x158\x5L\'\x2\x156\x158\x5N(\x2\x157\x151"+
		"\x3\x2\x2\x2\x157\x152\x3\x2\x2\x2\x157\x153\x3\x2\x2\x2\x157\x154\x3"+
		"\x2\x2\x2\x157\x155\x3\x2\x2\x2\x157\x156\x3\x2\x2\x2\x158\x159\x3\x2"+
		"\x2\x2\x159\x15A\a\x13\x2\x2\x15A\x43\x3\x2\x2\x2\x15B\x15F\x5P)\x2\x15C"+
		"\x15F\x5R*\x2\x15D\x15F\x5T+\x2\x15E\x15B\x3\x2\x2\x2\x15E\x15C\x3\x2"+
		"\x2\x2\x15E\x15D\x3\x2\x2\x2\x15F\x45\x3\x2\x2\x2\x160\x161\a\x18\x2\x2"+
		"\x161\x162\x5\x64\x33\x2\x162\x163\a/\x2\x2\x163\x164\x5X-\x2\x164G\x3"+
		"\x2\x2\x2\x165\x166\a\x1A\x2\x2\x166\x16B\x5\x64\x33\x2\x167\x168\a\x14"+
		"\x2\x2\x168\x16A\x5\x64\x33\x2\x169\x167\x3\x2\x2\x2\x16A\x16D\x3\x2\x2"+
		"\x2\x16B\x169\x3\x2\x2\x2\x16B\x16C\x3\x2\x2\x2\x16CI\x3\x2\x2\x2\x16D"+
		"\x16B\x3\x2\x2\x2\x16E\x16F\a\x1B\x2\x2\x16F\x174\x5X-\x2\x170\x171\a"+
		"\x14\x2\x2\x171\x173\x5X-\x2\x172\x170\x3\x2\x2\x2\x173\x176\x3\x2\x2"+
		"\x2\x174\x172\x3\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175K\x3\x2\x2\x2\x176"+
		"\x174\x3\x2\x2\x2\x177\x179\a\x19\x2\x2\x178\x17A\x5X-\x2\x179\x178\x3"+
		"\x2\x2\x2\x179\x17A\x3\x2\x2\x2\x17AM\x3\x2\x2\x2\x17B\x17C\a\x1C\x2\x2"+
		"\x17C\x17D\x5\x64\x33\x2\x17DO\x3\x2\x2\x2\x17E\x17F\a\x1E\x2\x2\x17F"+
		"\x180\a+\x2\x2\x180\x181\x5X-\x2\x181\x182\a,\x2\x2\x182\x183\a\x1F\x2"+
		"\x2\x183\x18D\x5> \x2\x184\x185\a#\x2\x2\x185\x186\a+\x2\x2\x186\x187"+
		"\x5X-\x2\x187\x188\a,\x2\x2\x188\x189\a\x1F\x2\x2\x189\x18A\x5> \x2\x18A"+
		"\x18C\x3\x2\x2\x2\x18B\x184\x3\x2\x2\x2\x18C\x18F\x3\x2\x2\x2\x18D\x18B"+
		"\x3\x2\x2\x2\x18D\x18E\x3\x2\x2\x2\x18E\x192\x3\x2\x2\x2\x18F\x18D\x3"+
		"\x2\x2\x2\x190\x191\a \x2\x2\x191\x193\x5> \x2\x192\x190\x3\x2\x2\x2\x192"+
		"\x193\x3\x2\x2\x2\x193\x194\x3\x2\x2\x2\x194\x195\a(\x2\x2\x195Q\x3\x2"+
		"\x2\x2\x196\x197\a!\x2\x2\x197\x198\a+\x2\x2\x198\x199\x5X-\x2\x199\x19A"+
		"\a,\x2\x2\x19A\x19B\a$\x2\x2\x19B\x19C\x5> \x2\x19C\x19D\a(\x2\x2\x19D"+
		"S\x3\x2\x2\x2\x19E\x19F\a\"\x2\x2\x19F\x1A0\x5> \x2\x1A0\x1A1\a!\x2\x2"+
		"\x1A1\x1A2\a+\x2\x2\x1A2\x1A3\x5X-\x2\x1A3\x1A4\a,\x2\x2\x1A4U\x3\x2\x2"+
		"\x2\x1A5\x1AA\x5X-\x2\x1A6\x1A7\a\x14\x2\x2\x1A7\x1A9\x5X-\x2\x1A8\x1A6"+
		"\x3\x2\x2\x2\x1A9\x1AC\x3\x2\x2\x2\x1AA\x1A8\x3\x2\x2\x2\x1AA\x1AB\x3"+
		"\x2\x2\x2\x1AB\x1AF\x3\x2\x2\x2\x1AC\x1AA\x3\x2\x2\x2\x1AD\x1AF\x3\x2"+
		"\x2\x2\x1AE\x1A5\x3\x2\x2\x2\x1AE\x1AD\x3\x2\x2\x2\x1AFW\x3\x2\x2\x2\x1B0"+
		"\x1B3\x5Z.\x2\x1B1\x1B2\t\x3\x2\x2\x1B2\x1B4\x5X-\x2\x1B3\x1B1\x3\x2\x2"+
		"\x2\x1B3\x1B4\x3\x2\x2\x2\x1B4Y\x3\x2\x2\x2\x1B5\x1B8\x5\\/\x2\x1B6\x1B7"+
		"\t\x4\x2\x2\x1B7\x1B9\x5Z.\x2\x1B8\x1B6\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2"+
		"\x2\x1B9[\x3\x2\x2\x2\x1BA\x1BD\x5^\x30\x2\x1BB\x1BC\t\x5\x2\x2\x1BC\x1BE"+
		"\x5\\/\x2\x1BD\x1BB\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE]\x3\x2\x2\x2"+
		"\x1BF\x1C1\t\x6\x2\x2\x1C0\x1BF\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1"+
		"\x1C2\x3\x2\x2\x2\x1C2\x1C3\x5`\x31\x2\x1C3_\x3\x2\x2\x2\x1C4\x1CE\x5"+
		"\x64\x33\x2\x1C5\x1CE\t\a\x2\x2\x1C6\x1C7\a\x11\x2\x2\x1C7\x1CE\x5`\x31"+
		"\x2\x1C8\x1CE\x5\x62\x32\x2\x1C9\x1CA\a+\x2\x2\x1CA\x1CB\x5X-\x2\x1CB"+
		"\x1CC\a,\x2\x2\x1CC\x1CE\x3\x2\x2\x2\x1CD\x1C4\x3\x2\x2\x2\x1CD\x1C5\x3"+
		"\x2\x2\x2\x1CD\x1C6\x3\x2\x2\x2\x1CD\x1C8\x3\x2\x2\x2\x1CD\x1C9\x3\x2"+
		"\x2\x2\x1CE\x61\x3\x2\x2\x2\x1CF\x1D0\a\x30\x2\x2\x1D0\x1D1\a+\x2\x2\x1D1"+
		"\x1D2\x5 \x11\x2\x1D2\x1D3\a,\x2\x2\x1D3\x63\x3\x2\x2\x2\x1D4\x1D8\a@"+
		"\x2\x2\x1D5\x1D7\x5\x66\x34\x2\x1D6\x1D5\x3\x2\x2\x2\x1D7\x1DA\x3\x2\x2"+
		"\x2\x1D8\x1D6\x3\x2\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9\x65\x3\x2\x2\x2\x1DA"+
		"\x1D8\x3\x2\x2\x2\x1DB\x1DC\a\x15\x2\x2\x1DC\x1E6\a@\x2\x2\x1DD\x1DE\a"+
		"-\x2\x2\x1DE\x1DF\x5X-\x2\x1DF\x1E0\a.\x2\x2\x1E0\x1E6\x3\x2\x2\x2\x1E1"+
		"\x1E2\a+\x2\x2\x1E2\x1E3\x5V,\x2\x1E3\x1E4\a,\x2\x2\x1E4\x1E6\x3\x2\x2"+
		"\x2\x1E5\x1DB\x3\x2\x2\x2\x1E5\x1DD\x3\x2\x2\x2\x1E5\x1E1\x3\x2\x2\x2"+
		"\x1E6g\x3\x2\x2\x2\x1E7\x1E8\a@\x2\x2\x1E8\x1EA\a\x15\x2\x2\x1E9\x1E7"+
		"\x3\x2\x2\x2\x1E9\x1EA\x3\x2\x2\x2\x1EA\x1EB\x3\x2\x2\x2\x1EB\x1EC\a@"+
		"\x2\x2\x1ECi\x3\x2\x2\x2\x32mv|\x87\x89\x8E\x93\x98\x9D\xA9\xB1\xBA\xBE"+
		"\xC2\xC8\xCF\xD6\xDE\xE7\xEC\xF1\x107\x10B\x10E\x124\x128\x12F\x133\x136"+
		"\x14A\x14F\x157\x15E\x16B\x174\x179\x18D\x192\x1AA\x1AE\x1B3\x1B8\x1BD"+
		"\x1C0\x1CD\x1D8\x1E5\x1E9";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SLangGrammar
